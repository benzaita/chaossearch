/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Format struct for Format
type Format struct {
	// The supported format types for parsing data to be indexed. The format will be used against all Objects in an Object Group. For any Objects that cannot be completely parsed.  If data of the wrong type is ingested and attempted to be indexed, that data is dropped and an event is emmitted (displayed in the UI or available via API). If a field in the data is corrupt or missing it is not an error.  JSON example      \"format\":{\"_type\":\"JSON\",\"stripPrefix\":true,\"horizontal\":true}  CSV format      \"format\":{\"_type\":\"CSV\",\"columnDelimiter\":\",\",\"rowDelimiter\":\"\\n\",\"headerRow\":true}  LOG example      \"format\":{\"_type\":\"LOG\",\"pattern\":\".*\"} 
	Type string `json:"_type"`
}

// NewFormat instantiates a new Format object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormat(type_ string, ) *Format {
	this := Format{}
	this.Type = type_
	return &this
}

// NewFormatWithDefaults instantiates a new Format object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormatWithDefaults() *Format {
	this := Format{}
	return &this
}

// GetType returns the Type field value
func (o *Format) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Format) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Format) SetType(v string) {
	o.Type = v
}

func (o Format) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFormat struct {
	value *Format
	isSet bool
}

func (v NullableFormat) Get() *Format {
	return v.value
}

func (v *NullableFormat) Set(val *Format) {
	v.value = val
	v.isSet = true
}

func (v NullableFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormat(val *Format) *NullableFormat {
	return &NullableFormat{value: val, isSet: true}
}

func (v NullableFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



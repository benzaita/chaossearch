/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2011Permissions struct for InlineResponse2011Permissions
type InlineResponse2011Permissions struct {
	// The type of effect for the permission of this container, Allow or Deny 
	Effect *string `json:"Effect,omitempty"`
	// The action(s) to which this container applies  | Action | Definition| |--------|-----------| | * | All-access | | s3:* | Ability to access S3 if given permissions in the IAM Policy and API calls to the Chaos Index | | s3:aws:* | Ability to access S3 if given permissions in the IAM Policy | | s3:chaos:* | Ability to access the ChaosSearch Admin API | | elastic:* | Ability to access the Elasticsearch API | | elastic:opendistro:* | Ability to access the Elasticsearch API | | chaos:* | Ability to access all replica, query, and theme settings | | chaos:replica:* | Ability to access all replica information (i.e. compute allocation), initiate burst and see the compute status | | chaos:replica:burst | Ability to click burst | | chaos:replica:status | Ability to see how many compute resources are allocated | | chaos:query:* | Full access to query permissions | | chaos:query:status | Ability to access the Query progress bar | | chaos:query:migrate |  | | chaos:query:cancel | Ability to Cancel a query | | chaos:query:pause |  | | chaos:theme:user | Ability to change the color scheme of the ChaosSearch UI | | kibana:* | Full access to Kibana permissions | | kibana-settings:read | Ability to access Visualizations and Dashboards | | kibana-settings:write | Ability to create Visualizations and Dashboards | | kibana-opendistro:* | Ability to create Alerts | | ui:* | Full access to the ChaosSearch UI | | ui:storage | Ability to access the Storage | | ui:refinery | Ability to access the Refinery | | ui:analytics | Ability to access the Analytics | | ui:dashboard | Ability to access the Dashboard | 
	Action *string `json:"Action,omitempty"`
	// The resource(s) to which this container applies 
	Resources *string `json:"Resources,omitempty"`
}

// NewInlineResponse2011Permissions instantiates a new InlineResponse2011Permissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2011Permissions() *InlineResponse2011Permissions {
	this := InlineResponse2011Permissions{}
	return &this
}

// NewInlineResponse2011PermissionsWithDefaults instantiates a new InlineResponse2011Permissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2011PermissionsWithDefaults() *InlineResponse2011Permissions {
	this := InlineResponse2011Permissions{}
	return &this
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *InlineResponse2011Permissions) GetEffect() string {
	if o == nil || o.Effect == nil {
		var ret string
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2011Permissions) GetEffectOk() (*string, bool) {
	if o == nil || o.Effect == nil {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *InlineResponse2011Permissions) HasEffect() bool {
	if o != nil && o.Effect != nil {
		return true
	}

	return false
}

// SetEffect gets a reference to the given string and assigns it to the Effect field.
func (o *InlineResponse2011Permissions) SetEffect(v string) {
	o.Effect = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *InlineResponse2011Permissions) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2011Permissions) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *InlineResponse2011Permissions) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *InlineResponse2011Permissions) SetAction(v string) {
	o.Action = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *InlineResponse2011Permissions) GetResources() string {
	if o == nil || o.Resources == nil {
		var ret string
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2011Permissions) GetResourcesOk() (*string, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *InlineResponse2011Permissions) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given string and assigns it to the Resources field.
func (o *InlineResponse2011Permissions) SetResources(v string) {
	o.Resources = &v
}

func (o InlineResponse2011Permissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Effect != nil {
		toSerialize["Effect"] = o.Effect
	}
	if o.Action != nil {
		toSerialize["Action"] = o.Action
	}
	if o.Resources != nil {
		toSerialize["Resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2011Permissions struct {
	value *InlineResponse2011Permissions
	isSet bool
}

func (v NullableInlineResponse2011Permissions) Get() *InlineResponse2011Permissions {
	return v.value
}

func (v *NullableInlineResponse2011Permissions) Set(val *InlineResponse2011Permissions) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2011Permissions) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2011Permissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2011Permissions(val *InlineResponse2011Permissions) *NullableInlineResponse2011Permissions {
	return &NullableInlineResponse2011Permissions{value: val, isSet: true}
}

func (v NullableInlineResponse2011Permissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2011Permissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



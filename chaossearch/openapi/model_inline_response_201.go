/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse201 struct for InlineResponse201
type InlineResponse201 struct {
	// The identifier of the sub-account 
	Uid *string `json:"Uid,omitempty"`
	// true if the sub-account exists after call, false otherwise 
	Exists *bool `json:"Exists,omitempty"`
}

// NewInlineResponse201 instantiates a new InlineResponse201 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse201() *InlineResponse201 {
	this := InlineResponse201{}
	return &this
}

// NewInlineResponse201WithDefaults instantiates a new InlineResponse201 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse201WithDefaults() *InlineResponse201 {
	this := InlineResponse201{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *InlineResponse201) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse201) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *InlineResponse201) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *InlineResponse201) SetUid(v string) {
	o.Uid = &v
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *InlineResponse201) GetExists() bool {
	if o == nil || o.Exists == nil {
		var ret bool
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse201) GetExistsOk() (*bool, bool) {
	if o == nil || o.Exists == nil {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *InlineResponse201) HasExists() bool {
	if o != nil && o.Exists != nil {
		return true
	}

	return false
}

// SetExists gets a reference to the given bool and assigns it to the Exists field.
func (o *InlineResponse201) SetExists(v bool) {
	o.Exists = &v
}

func (o InlineResponse201) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["Uid"] = o.Uid
	}
	if o.Exists != nil {
		toSerialize["Exists"] = o.Exists
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse201 struct {
	value *InlineResponse201
	isSet bool
}

func (v NullableInlineResponse201) Get() *InlineResponse201 {
	return v.value
}

func (v *NullableInlineResponse201) Set(val *InlineResponse201) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse201) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse201) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse201(val *InlineResponse201) *NullableInlineResponse201 {
	return &NullableInlineResponse201{value: val, isSet: true}
}

func (v NullableInlineResponse201) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse201) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



openapi: 3.0.3
info:
  description: |
    The ChaosSearch API is the administrative interface for the ChaosSearch service.

    It is composed of ChaosSearch and AWS style interfaces
    (built to provide interoperability with the S3 service).

    ChaosSearch admin API was originally modeled as an extension to the S3 API.
    Most of the API calls, parameters, etc will look familiar to those familiar
    with creating and managing S3 Buckets.
  title: ChaosSearch API
  version: 1.0.0
servers:
- url: /
paths:
  /Bucket/createObjectGroup:
    post:
      description: |
        Create a new Object Group which is unique to the ChaosSearch service.

        In order to get a listing or delete Object Groups an S3 style endpoint is used (e.g. /V1/).

        The update API (see /Bucket/updateObjectGroup) is limited to a subset of fields, so it will be necessary to delete and create an Object Group in order to update all fields.
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              example:
                bucket: my-object-group
                source: my-s3-bucket
                format:
                  _type: CSV
                  horizontal: true
                  stripPrefix: false
                interval:
                  mode: 0
                  column: 0
                indexRetention: 14
                filter:
                  field: key
                  regex: .*
                options:
                  ignoreIrregular: false
                  compression: GZIP
              properties:
                bucket:
                  description: |
                    Object Group name.

                    Object Group names can be any string without forward slash characters (path separators) Object Group names must be unique. Because Object Groups are
                    modeled in ChaosSearch as an S3 Bucket, as are Views, this name must be unique across any Bucket name.

                    Example

                        "my-object-group-01"

                    For best compatibility names should comply with S3 bucket name restrictions:
                      * Bucket names must be between 3 and 63 characters long.
                      * Bucket names can consist only of lowercase letters, numbers, dots (.), and hyphens (-).
                      * Bucket names must begin and end with a letter or number.
                      * Bucket names must not be formatted as an IP address (for example, 192.168.5.4).
                      * Bucket names can't begin with xn-- (for buckets created after February 2020).

                    **NOTE:**
                      Internal bucket resources use a prefix of `cs` or `system.`. In order to prevent conflict buckets should
                      not be named with either prefix.
                  type: string
                source:
                  description: The name of the S3 Bucket that backs this Object Group.
                  example: my-bucket
                  type: string
                filter:
                  description: |
                    An Object Group filter is a predicate used to filter Objects that will be
                    indexed by the system.

                    Example:

                        "filter": [{"field":"key","regex":".*"}]

                    The above example filter instructs the system to apply the regex ".*" to the S3 keys of the Objects encountered by indexing. It will consider all Objects of the given Object Group when indexing.

                    Example:

                        "filter": {
                          "AND": [
                            {"field": "key","prefix": "foo/"},
                            {"field": "key","regex": ".*"}
                          ]
                        }

                    This example adds a prefix predicate. The predicates will be joined with a logical AND to produce the filter. As with the first example, it will be applied to each Object key of the Object Group. It will consider only Objects that have a prefix of "foo".

                    Example:

                        "filter": {
                          "OR": [
                            {"field": "key","prefix": "foo/"},
                            {"field": "key","regex": ".*"}
                          ]
                        }

                    An example that adjusts the previous example so Objects that either have the prefix of 'foo/' OR the key of '.*' will be accepted.
                  items:
                    $ref: '#/components/schemas/ObjectGroupFilter'
                  type: array
                format:
                  $ref: '#/components/schemas/Format'
                options:
                  $ref: '#/components/schemas/_Bucket_createObjectGroup_options'
                liveEvents:
                  description: |
                    the ARN of the SQS queue that receives S3 Bucket event messages used by
                    ChaosSearch to index Objects as they are written.

                    Configuration of the SQS queue and bucket event notifications are done via
                    the AWS APIs.

                    Queues are not validated for correctness (i.e. correct permissions, queue
                    exists, etc)

                    When supplied the Object Group created is considered a Live index, otherwise it will be a static index.
                  example: arn:aws:sqs:us-east-1:0123456789012:s3-notifications
                  type: string
                interval:
                  $ref: '#/components/schemas/_Bucket_createObjectGroup_interval'
                indexRetention:
                  allOf:
                  - $ref: '#/components/schemas/TimeWindow'
                  - description: The number of days data will be retained before it's
                      deleted. To disable the retention policy (and keep data indefinitey)
                      do NOT supply this key
                partitionBy:
                  description: |
                    a regular expression with capture groups used to partition the indexes of the Object Group.

                    The regex is applied to each S3 key encountered by indexing. Partitions are created by taking the resulting strings from the capture groups. When no capture groups are matched for a given key the default partition is used.

                    Objects in the bucket that parse will be indexed regardless of a match against the partitionBy regex.

                    Example:

                        # Files on S3
                        1. /587656/blue/2020-10-15.json
                        2. /587656/blue/2020-10-16.json
                        3. /587656/green/2020-10-15.json
                        4. /587656/green/2020-10-16.json
                        5. /foo/blue/2020-10-15.json
                        6. /2020-10-16.json

                        partitionBy: "/([0-9]+)/(.*)/.*"

                        The regex will generate a partition of "587656" and "blue" for the
                        first two files, "587656" and "green" for the second two files, "blue"
                        for the fifth file, and the default partition for the sixth.
                  example: regex-with-(capture-group1)-(capture-group2)
                  type: string
              required:
              - bucket
              - contentType
              - filter
              - format
              - options
              - source
              type: object
      responses:
        "200":
          description: successful creation
        "400":
          content:
            application/json:
              example:
                code: BucketAlreadyExists
                message: Bucket Already Exists
              schema:
                $ref: '#/components/schemas/JsonResponse'
          description: The specified resource already exists
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Create a new Object Group
  /Bucket/updateObjectGroup:
    post:
      description: Update an existing Object Group
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                bucket:
                  description: Object Group Name
                  type: string
                indexRetention:
                  default: -1
                  description: A time window (in terms of days) to determine whether
                    a resource should be included (a value of -1 means no limit)
                  type: integer
                targetActiveIndex:
                  default: 1
                  description: |
                    Allow overriding number of "irrevokable" leases on compute for tasks associated with in. Use with care.

                    Object Group indexing model uses a lease system to allocate workers (registered units) for indexing jobs. Each worker is allowed one
                    lease. By default an index for a given Object Group will require 1 lease in order to make progress. By setting the target active index
                    value to something larger than 1, the system will attempt to allocate more leases for indexing. If the system has no more leases to give,
                    the index will progress as long as it has at least 1 lease allocated.

                    By default the value is 1

                    ChaosSearch support should be enagaged to help tune this value for latency sensitive indexes.
                  type: integer
              required:
              - bucket
              type: object
      responses:
        "200":
          description: Successful update of existing Object Group
        "400":
          content:
            application/json:
              example:
                code: BucketAlreadyExists
                message: Bucket Already Exists
              schema:
                $ref: '#/components/schemas/JsonResponse'
          description: The specified resource already exists
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Update an existing Object Group
  /Bucket/createView:
    post:
      description: |
        Create a new View. A view is a virtual Object Group, comprising 1 or more Object Groups.

        Views add permissions, default time fields, etc

        To list or delete Views, an S3 style endpoint is used (e.g. /V1/).

        **NOTE:** The update API is limited to a subset of fields, necessary to delete and create a View in order to update all fields.
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/json:
            schema:
              properties:
                bucket:
                  description: View Name
                  type: string
                sources:
                  description: |
                    The View's source of data, a list of Object Group Names.

                    IMPORTANT: An empty array means ALL Object Groups!

                    **NOTE:** View Name cannot be identical with an Object Group Name.
                  items:
                    type: string
                  type: array
                indexPattern:
                  description: |
                    An Index Pattern (regex) that matches and filters source based on index names, practically speaking from Object Groups Names.

                    Example:

                        Object Group Name: foo
                        Resulting index names (for daily indexes):
                        _foo_2020-10-15_
                        _foo_2020-10-16_

                        Resulting index names:
                        _foo_
                  type: string
                caseInsensitive:
                  default: false
                  description: |
                    Flag to toggle case-sensitivity of searches of all values in the View

                    Example:

                        row: {"Foo": "Bar"}
                        Searching for "Bar" is treated case-insensitive, but keys such as "Foo" are still case-sensitive.
                  type: boolean
                indexRetention:
                  $ref: '#/components/schemas/ViewTimeWindow'
                transforms:
                  default: []
                  description: transformations on fields used to produce new fields
                    from existing ones
                  items:
                    $ref: '#/components/schemas/Transform'
                  type: array
                filters:
                  description: |
                    TODO describe what and how filters work, especially predicates

                    Also, how to add AND, and OR logic here

                    Example log:

                        {
                          "system": "foo",
                          "type": "elb-access",
                          "stage": "staging",
                        }

                        User allowed to see all data where "system" = "foo", and "type" matches ".*(-access$)" but not
                        "stage" = "production".

                    Example:

                        "filter": {
                          "predicate": {
                              "field": "attrs.Cluster",
                              "query": "au-production",
                              "state": {
                                  "_type": "chaossumo.query.QEP.Predicate.TextMatchState.Exact"
                              },
                              "_type": "chaossumo.query.NIRFrontend.Request.Predicate.TextMatch"
                          }
                        }
              required:
              - bucket
              - indexPattern
              - sources
              type: object
      responses:
        "200":
          description: Successful creation of View
        "400":
          content:
            application/json:
              example:
                code: BucketAlreadyExists
                message: Bucket Already Exists
              schema:
                $ref: '#/components/schemas/JsonResponse'
          description: The specified resource already exists
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Create a new View
  /Bucket/updateView:
    post:
      description: Update an existing View
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/json:
            schema:
              properties:
                bucket:
                  description: View Name
                  type: string
                indexRetention:
                  $ref: '#/components/schemas/ViewTimeWindow'
              type: object
      responses:
        "200":
          description: Successful update of existing View
        "400":
          content:
            application/json:
              example:
                code: BucketAlreadyExists
                message: Bucket Already Exists
              schema:
                $ref: '#/components/schemas/JsonResponse'
          description: The specified resource already exists
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Update an existing View
  /Bucket/partitionKeys:
    post:
      description: Fetch the partition keys for a View, Object Group, or index
      requestBody:
        $ref: '#/components/requestBodies/inline_object_4'
        content:
          application/json:
            schema:
              properties:
                bucket:
                  description: |
                    Can be the name of either a View, Object Group, or index.

                    View and Object Groups all resolve to an index (i.e. they are built on indexes),
                    this API accepts names of the resolved indexes or the by names of resources
                    that can be used to resolve them.
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Return a collection of keys for each partition that exists
        "400":
          description: The specified resource does not exist
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Fetch the partition keys for a View, Object Group, or index
  /Bucket/model:
    post:
      description: |
        Send a control signal to the system to operate indexing
      requestBody:
        $ref: '#/components/requestBodies/inline_object_5'
        content:
          application/json:
            schema:
              properties:
                BucketName:
                  description: |
                    Object Group name
                  type: string
                ModelMode:
                  description: |
                    Integer to represent the state(s) of the model

                    1 => Restart Indexing

                    0 => Start Indexing

                    -1 => Stop Indexing

                    -2 => Terminate Indexing
                  type: integer
              type: object
      responses:
        "200":
          description: successful state change
        "400":
          content:
            application/json:
              example:
                code: ModelSchemaFailure
                message: Model Schema Failed
              schema:
                $ref: '#/components/schemas/JsonResponse'
          description: The model schema supplied was not valid
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Send a control signal to the system to operate indexing
  /Bucket/metadata:
    post:
      description: |
        Fetch bucket metadata that includes information regarding index statistics

        Example:

          {"BucketNames":["foo_object_group"]}
      requestBody:
        $ref: '#/components/requestBodies/inline_object_6'
        content:
          application/json:
            schema:
              properties:
                BucketNames:
                  items:
                    type: string
                  type: array
              type: object
      responses:
        "200":
          description: |
            Metadata of the given bucket(s)
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Fetch bucket metadata that includes information regarding index statistics
  /V1/:
    get:
      description: List existing Object Groups
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/XmlResponse'
          description: |
            A successful list of resources that complies with the S3 XML spec

            Example:

                <ListAllMyBucketsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01">
                  <Owner>
                    <ID>Me</ID>
                    <DisplayName>me</DisplayName>
                  </Owner>
                  <Buckets>
                    <Bucket>
                      <Name>192.168.5.4</Name>
                      <CreationDate>2020-10-22T17:43:51.007Z</CreationDate>
                      <Tagging>
                        <TagSet>
                          <Tag><Key>cs3.region</Key><Value>us-east-1</Value></Tag>
                          <Tag><Key>cs3.compression</Key><Value>none</Value></Tag>
                          <Tag><Key>cs3.interval</Key><Value>true</Value></Tag>
                          <Tag><Key>cs3.index-retention</Key><Value>14</Value></Tag>
                          <Tag><Key>cs3.predicate</Key><Value>{&quot;AND&quot;:[{&quot;field&quot;:&quot;key&quot;,&quot;regex&quot;:&quot;.*&quot;}]}</Value></Tag>
                          <Tag><Key>cs3.bucket-type</Key><Value>object-group</Value></Tag>
                          <Tag><Key>cs3.visible</Key><Value>true</Value></Tag>
                          <Tag><Key>cs3.dataset-id</Key><Value>5dba873a-3b61-4eb1-bb78-07e237eda43c</Value></Tag>
                          <Tag><Key>cs3.target-active-index</Key><Value>-1</Value></Tag>
                          <Tag><Key>cs3.dataset-format</Key><Value>{&quot;stripPrefix&quot;:true,&quot;_type&quot;:&quot;JSON&quot;}</Value></Tag>
                          <Tag><Key>cs3.parent</Key><Value>bsd-glacier</Value></Tag>
                          <Tag><Key>cs3.events</Key><Value>[]</Value></Tag>
                        </TagSet>
                      </Tagging>
                    </Bucket>
                    ...
                  </Buckets>
                </ListAllMyBucketsResult>

              Each Bucket has a tagset with attributes for that bucket. Most of the tags are attributes specified when the Bucket was created.

              *cs3.parent* the name of the parent of this Bucket, in the case of an Object Group it will be the physical (native S3 bucket) name

              *cs3.bucket-type* the type of bucket, it can have values -> physical (native S3 bucket), object-group, or view
      summary: List existing Object Groups
  /V1/{key}:
    delete:
      description: Delete Views/Object Groups
      parameters:
      - description: |
          {key} can be a View Name, or an Object Group Name
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful delete of Object Group
        "400":
          description: The specified resource does not exist
      summary: Delete Views/Object Groups
  /user/manifest:
    post:
      description: |
        Provide a manifest of all user related resources (e.g. sub-accounts, groups, etc)

        **NOTE:**
          This endpoint does not require a body, if provided make it empty
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: |
            A JSON object with all user related resources of the given context
      summary: Provide a manifest of all user related resources
  /user/createSubAccount:
    post:
      description: |
        Create or Edit a sub-account under the given user context

        **NOTE:** This endpoint is also used to edit an existing sub-account

        The UID is returned by the service on a successful creation of a new sub-account is the identifier of the sub-account.
      requestBody:
        $ref: '#/components/requestBodies/inline_object_7'
        content:
          application/json:
            schema:
              properties:
                UserInfoBlock:
                  $ref: '#/components/schemas/_user_createSubAccount_UserInfoBlock'
                GroupsIds:
                  items:
                    type: string
                  type: array
                Password:
                  type: string
                Hocon:
                  description: |
                    used to override or set internal fields of the sub-account (please work with ChaosSearch support to use)
                  items:
                    type: string
                  type: array
              required:
              - Email
              - FullName
              - UserName
              type: object
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
          description: |
            The created sub-account data

            Uid -> the UID of the sub-account

            Exists -> flag to signal whether the account already existed in the system prior to
                      the call (a value of `true` means the sub-account was modified)
        "400":
          description: |
            If required fields are not provided
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Create or Edit a sub-account under the given user context
  /user/deleteSubAccount:
    post:
      description: |
        Delete a sub-account under the given user context
      requestBody:
        $ref: '#/components/requestBodies/inline_object_8'
        content:
          application/json:
            schema:
              properties:
                Username:
                  example: foo@bar.com
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: |
            A successful delete of the sub-account returns a value of `false` for the key of `Exists`
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Delete a sub-account under the given user context
  /user/groups:
    delete:
      description: |
        Deletes groups of this user context given an array of group IDs. The caller must
        provide a JSON body with all required group information to delete existing groups. The
        groups must already exist in the user context. This call is atomic, either all of the
        groups in the JSON document succeed in being deleted, or none of them do.

        Example (delete 1 existing group for this user context):

            [ "7db91912-a3e9-4641-873c-3deccd07484c" ]
      responses:
        "200":
          description: |
            An array of identifiers that were deleted
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: string
                    example: "7db91912-a3e9-4641-873c-3deccd07484c"
        "400":
          description: The specified resource does not exist
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Delete groups of this user context
    get:
      description: |
        Returns all of the group data of this user context

        Fetch all groups of this user context (every account contains a default group with
        access to all resources)
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_3'
                type: array
          description: |
            The groups of the user context
      summary: Fetch all groups of this user context
    post:
      description: |
        Create new groups for this user context. The caller must provide a JSON body with all
        required group information to create new groups. The groups must not already exist in
        the user context. This call is atomic, either all of the groups in the JSON document
        succeed in being created, or none of them do.
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/InlineObject'
              type: array
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
          description: |
            Permission group contain policy used by RBAC
        "400":
          description: The specified resource does not exist
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Create new groups for this user context
    put:
      description: |
        Update existing groups of this user context. The caller must provide a JSON body with
        all required group information to update existing groups. The groups must already exist
        in the user context. This call is atomic, either all of the groups in the JSON document
        succeed in being updated, or none of them do.
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/InlineObject'
              type: array
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
          description: |
            Permission group contain policy used by RBAC
        "400":
          description: The specified resource does not exist
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Update existing groups of this user context
  /user/group/{id}:
    delete:
      description: |
        Delete the group data for the group ID
      parameters:
      - description: |
          {id} is the ID of a Group
        example: 7db91912-a3e9-4641-873c-3deccd07484c
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  example: 7db91912-a3e9-4641-873c-3deccd07484c
                  type: string
                type: array
          description: successful delete
        "400":
          description: The specified resource does not exist
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Delete the group data for the group ID
    description: |
      Fetch or delete a given group identified by its ID, there is no body sent to this
      endpoint, but JSON documents are returned by it. If you require bulk group operations see
      the groups endpoint
    get:
      description: |
        Returns a JSON document with the group data for the group ID
      parameters:
      - description: |
          {id} is the ID of a Group
        example: 7db91912-a3e9-4641-873c-3deccd07484c
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
          description: |
            Permission group contain policy used by RBAC
        "500":
          content:
            application/json:
              example: There was an internal server error.
              schema:
                $ref: '#/components/schemas/TextResponse'
          description: The input was invalid
      summary: Fetch the group data for the group ID
components:
  requestBodies:
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
    inline_object_8:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_8'
    inline_object_7:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_7'
    inline_object_6:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_6'
    inline_object_5:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_5'
    inline_object_4:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
    inline_object_3:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
    inline_object_2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
  responses:
    DuplicateBucketError:
      content:
        application/json:
          example:
            code: BucketAlreadyExists
            message: Bucket Already Exists
          schema:
            $ref: '#/components/schemas/JsonResponse'
      description: The specified resource already exists
    ModelSchemaFailure:
      content:
        application/json:
          example:
            code: ModelSchemaFailure
            message: Model Schema Failed
          schema:
            $ref: '#/components/schemas/JsonResponse'
      description: The model schema supplied was not valid
    InvalidInputError:
      content:
        application/json:
          example: There was an internal server error.
          schema:
            $ref: '#/components/schemas/TextResponse'
      description: The input was invalid
    SuccessfulListing:
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/XmlResponse'
      description: |
        A successful list of resources that complies with the S3 XML spec

        Example:

            <ListAllMyBucketsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01">
              <Owner>
                <ID>Me</ID>
                <DisplayName>me</DisplayName>
              </Owner>
              <Buckets>
                <Bucket>
                  <Name>192.168.5.4</Name>
                  <CreationDate>2020-10-22T17:43:51.007Z</CreationDate>
                  <Tagging>
                    <TagSet>
                      <Tag><Key>cs3.region</Key><Value>us-east-1</Value></Tag>
                      <Tag><Key>cs3.compression</Key><Value>none</Value></Tag>
                      <Tag><Key>cs3.interval</Key><Value>true</Value></Tag>
                      <Tag><Key>cs3.index-retention</Key><Value>14</Value></Tag>
                      <Tag><Key>cs3.predicate</Key><Value>{&quot;AND&quot;:[{&quot;field&quot;:&quot;key&quot;,&quot;regex&quot;:&quot;.*&quot;}]}</Value></Tag>
                      <Tag><Key>cs3.bucket-type</Key><Value>object-group</Value></Tag>
                      <Tag><Key>cs3.visible</Key><Value>true</Value></Tag>
                      <Tag><Key>cs3.dataset-id</Key><Value>5dba873a-3b61-4eb1-bb78-07e237eda43c</Value></Tag>
                      <Tag><Key>cs3.target-active-index</Key><Value>-1</Value></Tag>
                      <Tag><Key>cs3.dataset-format</Key><Value>{&quot;stripPrefix&quot;:true,&quot;_type&quot;:&quot;JSON&quot;}</Value></Tag>
                      <Tag><Key>cs3.parent</Key><Value>bsd-glacier</Value></Tag>
                      <Tag><Key>cs3.events</Key><Value>[]</Value></Tag>
                    </TagSet>
                  </Tagging>
                </Bucket>
                ...
              </Buckets>
            </ListAllMyBucketsResult>

          Each Bucket has a tagset with attributes for that bucket. Most of the tags are attributes specified when the Bucket was created.

          *cs3.parent* the name of the parent of this Bucket, in the case of an Object Group it will be the physical (native S3 bucket) name

          *cs3.bucket-type* the type of bucket, it can have values -> physical (native S3 bucket), object-group, or view
    PermissionGroupObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_201_1'
      description: |
        Permission group contain policy used by RBAC
  schemas:
    ObjectGroupFilter:
      properties:
        field:
          description: |
            Filter predicates to be applied to an Object key (requires either prefix or regex property)
          enum:
          - key
          type: string
        regex:
          description: |
            A regular expression predicate to be applied to a key
          type: string
        prefix:
          description: |
            A regular expression predicate to be applied to the prefix of a key
          type: string
      required:
      - field
    Format:
      properties:
        _type:
          description: |
            The supported format types for parsing data to be indexed. The format will be used
            against all Objects in an Object Group. For any Objects that cannot be completely
            parsed.

            If data of the wrong type is ingested and attempted to be indexed, that data is
            dropped and an event is emmitted (displayed in the UI or available via API). If a
            field in the data is corrupt or missing it is not an error.

            JSON example

                "format":{"_type":"JSON","stripPrefix":true,"horizontal":true}

            CSV format

                "format":{"_type":"CSV","columnDelimiter":",","rowDelimiter":"\n","headerRow":true}

            LOG example

                "format":{"_type":"LOG","pattern":".*"}
          enum:
          - CSV
          - JSON
          - LOG
          type: string
      required:
      - _type
      type: object
    OutputField:
      properties:
        name:
          description: A name for a given field
          type: string
        type:
          description: A type for a given field
          enum:
          - STRING
          - NUMBER
          - TIMEVAL
          type: string
      required:
      - name
      - type
      type: object
    Transform:
      properties:
        _type:
          description: |
            A field transformer type

            ## MaterializeRegexTransform
            "Transforms": [
                {
                  "_type":"MaterializeRegexTransform",
                  "pattern":".*(c).*(e)",
                  "inputField":"food",
                  "outputFields": [
                    {"name":"foo-number","type":"NUMBER"},{"name":"foo-time","type":"TIMEVAL"}
                  ]
                },
                {
                  "_type":"MaterializeRegexTransform",
                  "pattern":".*(c).*(e)",
                  "inputField":"first_name",
                  "outputFields":[
                    {"name":"foo-first","type":"STRING"},{"name":"foo-second","type":"STRING"}
                  ]
                }
              ]
            }

            The above transforms when given the following column values will produce new columns

              column value "regex-with-capture" -> virtual column "foo-number": "", virtual column "foo-time": ""
              column value "regex-with-capture" -> virtual column "foo-first": "c", virtual column "foo-second": "e"

              The first row produces empty column values because the type(s) do not parse
          enum:
          - MaterializeRegexTransform
          - IPFieldTransform
          - GeoPointFieldTransform
          - UniqueIDTransform
          - VerticalArrayTransform
          type: string
        pattern:
          description: A regular expression with capture groups to extract values
            to apply transformation to
          type: string
        inputField:
          description: The column name from the source index
          type: string
        outputFields:
          items:
            $ref: '#/components/schemas/OutputField'
          type: array
      required:
      - _type
      - inputField
      - outputFields
      - pattern
    TimeWindow:
      default: -1
      description: A time window (in terms of days) to determine whether a resource
        should be included (a value of -1 means no limit)
      type: integer
    ViewTimeWindow:
      allOf:
      - $ref: '#/components/schemas/TimeWindow'
      - description: |
          A View Window.

          Data outside of this window is not accessible.

          **NOTE:** The name "indexRetention" is used since a View is a
          Virtual Object Group. Data outside of this window is not
          actually deleted.
    JsonResponse:
      properties:
        code:
          type: string
        message:
          type: string
      type: object
    XmlResponse:
      properties:
        document:
          type: string
      type: object
    TextResponse:
      type: string
    _Bucket_createObjectGroup_options:
      properties:
        ignoreIrregular:
          description: |
            Ignore Irregular Objects while indexing a bucket (deprecated)

            This setting should always be set `true`.
          type: boolean
        compression:
          description: |
            Compression algorithm used to compress the Object stored in S3, used by
            ChaosSearch to decompress the archive for indexing.

            **NOTE:** Do not supply this key if the Objects in the bucket are not compressed
          enum:
          - GZIP
          - ZLIB
          - SNAPPY
          type: string
        colTypes:
          description: |
            Column Types can be used to override a given column's data type.
            Parsing of Objects will produce values of the overridden type

            Example

                "colTypes": { "foo": "NUMBER" }

            The above example will override the data type of the column named "foo" so its value will be a NUMBER
          example:
            foo: NUMBER
          type: object
      required:
      - ignoreIrregular
      type: object
    _Bucket_createObjectGroup_interval:
      description: |
        The index interval (daily) may be enabled by passing a value of 0 for the
        mode and column. Otherwise there will be no index interval (a single file
        will be produced)

        **NOTE:** To disable the interval do not supply this key.
      example:
        mode: 0
        column: 0
      properties:
        mode:
          type: integer
        column:
          type: integer
      required:
      - column
      - mode
      type: object
    inline_object:
      example:
        bucket: my-object-group
        source: my-s3-bucket
        format:
          _type: CSV
          horizontal: true
          stripPrefix: false
        interval:
          mode: 0
          column: 0
        indexRetention: 14
        filter:
          field: key
          regex: .*
        options:
          ignoreIrregular: false
          compression: GZIP
      properties:
        bucket:
          description: |
            Object Group name.

            Object Group names can be any string without forward slash characters (path separators) Object Group names must be unique. Because Object Groups are
            modeled in ChaosSearch as an S3 Bucket, as are Views, this name must be unique across any Bucket name.

            Example

                "my-object-group-01"

            For best compatibility names should comply with S3 bucket name restrictions:
              * Bucket names must be between 3 and 63 characters long.
              * Bucket names can consist only of lowercase letters, numbers, dots (.), and hyphens (-).
              * Bucket names must begin and end with a letter or number.
              * Bucket names must not be formatted as an IP address (for example, 192.168.5.4).
              * Bucket names can't begin with xn-- (for buckets created after February 2020).

            **NOTE:**
              Internal bucket resources use a prefix of `cs` or `system.`. In order to prevent conflict buckets should
              not be named with either prefix.
          type: string
        source:
          description: The name of the S3 Bucket that backs this Object Group.
          example: my-bucket
          type: string
        filter:
          description: |
            An Object Group filter is a predicate used to filter Objects that will be
            indexed by the system.

            Example:

                "filter": [{"field":"key","regex":".*"}]

            The above example filter instructs the system to apply the regex ".*" to the S3 keys of the Objects encountered by indexing. It will consider all Objects of the given Object Group when indexing.

            Example:

                "filter": {
                  "AND": [
                    {"field": "key","prefix": "foo/"},
                    {"field": "key","regex": ".*"}
                  ]
                }

            This example adds a prefix predicate. The predicates will be joined with a logical AND to produce the filter. As with the first example, it will be applied to each Object key of the Object Group. It will consider only Objects that have a prefix of "foo".

            Example:

                "filter": {
                  "OR": [
                    {"field": "key","prefix": "foo/"},
                    {"field": "key","regex": ".*"}
                  ]
                }

            An example that adjusts the previous example so Objects that either have the prefix of 'foo/' OR the key of '.*' will be accepted.
          items:
            $ref: '#/components/schemas/ObjectGroupFilter'
          type: array
        format:
          $ref: '#/components/schemas/Format'
        options:
          $ref: '#/components/schemas/_Bucket_createObjectGroup_options'
        liveEvents:
          description: |
            the ARN of the SQS queue that receives S3 Bucket event messages used by
            ChaosSearch to index Objects as they are written.

            Configuration of the SQS queue and bucket event notifications are done via
            the AWS APIs.

            Queues are not validated for correctness (i.e. correct permissions, queue
            exists, etc)

            When supplied the Object Group created is considered a Live index, otherwise it will be a static index.
          example: arn:aws:sqs:us-east-1:0123456789012:s3-notifications
          type: string
        interval:
          $ref: '#/components/schemas/_Bucket_createObjectGroup_interval'
        indexRetention:
          allOf:
          - $ref: '#/components/schemas/TimeWindow'
          - description: The number of days data will be retained before it's deleted.
              To disable the retention policy (and keep data indefinitey) do NOT supply
              this key
        partitionBy:
          description: |
            a regular expression with capture groups used to partition the indexes of the Object Group.

            The regex is applied to each S3 key encountered by indexing. Partitions are created by taking the resulting strings from the capture groups. When no capture groups are matched for a given key the default partition is used.

            Objects in the bucket that parse will be indexed regardless of a match against the partitionBy regex.

            Example:

                # Files on S3
                1. /587656/blue/2020-10-15.json
                2. /587656/blue/2020-10-16.json
                3. /587656/green/2020-10-15.json
                4. /587656/green/2020-10-16.json
                5. /foo/blue/2020-10-15.json
                6. /2020-10-16.json

                partitionBy: "/([0-9]+)/(.*)/.*"

                The regex will generate a partition of "587656" and "blue" for the
                first two files, "587656" and "green" for the second two files, "blue"
                for the fifth file, and the default partition for the sixth.
          example: regex-with-(capture-group1)-(capture-group2)
          type: string
      required:
      - bucket
      - contentType
      - filter
      - format
      - options
      - source
      type: object
    inline_object_1:
      properties:
        bucket:
          description: Object Group Name
          type: string
        indexRetention:
          default: -1
          description: A time window (in terms of days) to determine whether a resource
            should be included (a value of -1 means no limit)
          type: integer
        targetActiveIndex:
          default: 1
          description: |
            Allow overriding number of "irrevokable" leases on compute for tasks associated with in. Use with care.

            Object Group indexing model uses a lease system to allocate workers (registered units) for indexing jobs. Each worker is allowed one
            lease. By default an index for a given Object Group will require 1 lease in order to make progress. By setting the target active index
            value to something larger than 1, the system will attempt to allocate more leases for indexing. If the system has no more leases to give,
            the index will progress as long as it has at least 1 lease allocated.

            By default the value is 1

            ChaosSearch support should be enagaged to help tune this value for latency sensitive indexes.
          type: integer
      required:
      - bucket
      type: object
    inline_object_2:
      properties:
        bucket:
          description: View Name
          type: string
        sources:
          description: |
            The View's source of data, a list of Object Group Names.

            IMPORTANT: An empty array means ALL Object Groups!

            **NOTE:** View Name cannot be identical with an Object Group Name.
          items:
            type: string
          type: array
        indexPattern:
          description: |
            An Index Pattern (regex) that matches and filters source based on index names, practically speaking from Object Groups Names.

            Example:

                Object Group Name: foo
                Resulting index names (for daily indexes):
                _foo_2020-10-15_
                _foo_2020-10-16_

                Resulting index names:
                _foo_
          type: string
        caseInsensitive:
          default: false
          description: |
            Flag to toggle case-sensitivity of searches of all values in the View

            Example:

                row: {"Foo": "Bar"}
                Searching for "Bar" is treated case-insensitive, but keys such as "Foo" are still case-sensitive.
          type: boolean
        indexRetention:
          $ref: '#/components/schemas/ViewTimeWindow'
        transforms:
          default: []
          description: transformations on fields used to produce new fields from existing
            ones
          items:
            $ref: '#/components/schemas/Transform'
          type: array
        filters:
          description: |
            TODO describe what and how filters work, especially predicates

            Also, how to add AND, and OR logic here

            Example log:

                {
                  "system": "foo",
                  "type": "elb-access",
                  "stage": "staging",
                }

                User allowed to see all data where "system" = "foo", and "type" matches ".*(-access$)" but not
                "stage" = "production".

            Example:

                "filter": {
                  "predicate": {
                      "field": "attrs.Cluster",
                      "query": "au-production",
                      "state": {
                          "_type": "chaossumo.query.QEP.Predicate.TextMatchState.Exact"
                      },
                      "_type": "chaossumo.query.NIRFrontend.Request.Predicate.TextMatch"
                  }
                }
      required:
      - bucket
      - indexPattern
      - sources
      type: object
    inline_object_3:
      properties:
        bucket:
          description: View Name
          type: string
        indexRetention:
          $ref: '#/components/schemas/ViewTimeWindow'
      type: object
    inline_object_4:
      properties:
        bucket:
          description: |
            Can be the name of either a View, Object Group, or index.

            View and Object Groups all resolve to an index (i.e. they are built on indexes),
            this API accepts names of the resolved indexes or the by names of resources
            that can be used to resolve them.
          type: string
      type: object
    inline_response_200:
      example:
        key:
        - key
        - key
      properties:
        key:
          default: []
          items:
            description: |
              An array of partition capture group values.

              The `partitionBy` attribute on an Object Group is what gives the partition
              specification using regular expression capture groups. For any Object that
              does not match any capture group of the regular expression it will go into
              the `default` partition.

              **NOTE:**
                A key can be `default` if the partition regex didn’t match
            type: string
          type: array
      type: object
    inline_object_5:
      properties:
        BucketName:
          description: |
            Object Group name
          type: string
        ModelMode:
          description: |
            Integer to represent the state(s) of the model

            1 => Restart Indexing

            0 => Start Indexing

            -1 => Stop Indexing

            -2 => Terminate Indexing
          type: integer
      type: object
    inline_object_6:
      properties:
        BucketNames:
          items:
            type: string
          type: array
      type: object
    inline_response_200_1_Regions:
      example:
        Uid: Uid
        Region: Region
        IpNumber: 0.8008281904610115
      properties:
        Region:
          type: string
        Uid:
          type: string
        IpNumber:
          type: number
      type: object
    inline_response_200_1_permissions:
      example:
        Version: Version
        Actions:
        - Actions
        - Actions
        Effect: Effect
        Resources:
        - Resources
        - Resources
      properties:
        Version:
          type: string
        Effect:
          type: string
        Actions:
          items:
            type: string
          type: array
        Resources:
          items:
            type: string
          type: array
      type: object
    inline_response_200_1_Groups:
      example:
        permissions:
        - Version: Version
          Actions:
          - Actions
          - Actions
          Effect: Effect
          Resources:
          - Resources
          - Resources
        - Version: Version
          Actions:
          - Actions
          - Actions
          Effect: Effect
          Resources:
          - Resources
          - Resources
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/inline_response_200_1_permissions'
          type: array
      type: object
    inline_response_200_1_SubAccounts:
      example:
        Uid: Uid
        Hocon: Hocon
        Activated: true
        GroupIds:
        - GroupIds
        - GroupIds
        Username: Username
        FullName: FullName
      properties:
        Uid:
          type: string
        Username:
          type: string
        Hocon:
          type: string
        Activated:
          type: boolean
        GroupIds:
          items:
            type: string
          type: array
        FullName:
          type: string
      type: object
    inline_response_200_1_Users:
      example:
        Uid: Uid
        Hocon: Hocon
        Activated: true
        Email: Email
        Readonly: true
        Username: Username
        Groups:
        - permissions:
          - Version: Version
            Actions:
            - Actions
            - Actions
            Effect: Effect
            Resources:
            - Resources
            - Resources
          - Version: Version
            Actions:
            - Actions
            - Actions
            Effect: Effect
            Resources:
            - Resources
            - Resources
          name: name
          id: id
        - permissions:
          - Version: Version
            Actions:
            - Actions
            - Actions
            Effect: Effect
            Resources:
            - Resources
            - Resources
          - Version: Version
            Actions:
            - Actions
            - Actions
            Effect: Effect
            Resources:
            - Resources
            - Resources
          name: name
          id: id
        ServiceType: true
        SubAccounts:
        - Uid: Uid
          Hocon: Hocon
          Activated: true
          GroupIds:
          - GroupIds
          - GroupIds
          Username: Username
          FullName: FullName
        - Uid: Uid
          Hocon: Hocon
          Activated: true
          GroupIds:
          - GroupIds
          - GroupIds
          Username: Username
          FullName: FullName
        FullName: true
        Regions:
        - Uid: Uid
          Region: Region
          IpNumber: 0.8008281904610115
        - Uid: Uid
          Region: Region
          IpNumber: 0.8008281904610115
        Deployed: true
      properties:
        Uid:
          type: string
        Username:
          type: string
        Hocon:
          type: string
        Activated:
          type: boolean
        Regions:
          items:
            $ref: '#/components/schemas/inline_response_200_1_Regions'
          type: array
        Deployed:
          type: boolean
        Email:
          type: string
        Groups:
          items:
            $ref: '#/components/schemas/inline_response_200_1_Groups'
          type: array
        Readonly:
          type: boolean
        SubAccounts:
          items:
            $ref: '#/components/schemas/inline_response_200_1_SubAccounts'
          type: array
        ServiceType:
          type: boolean
        FullName:
          type: boolean
      type: object
    inline_response_200_1:
      example:
        Users:
        - Uid: Uid
          Hocon: Hocon
          Activated: true
          Email: Email
          Readonly: true
          Username: Username
          Groups:
          - permissions:
            - Version: Version
              Actions:
              - Actions
              - Actions
              Effect: Effect
              Resources:
              - Resources
              - Resources
            - Version: Version
              Actions:
              - Actions
              - Actions
              Effect: Effect
              Resources:
              - Resources
              - Resources
            name: name
            id: id
          - permissions:
            - Version: Version
              Actions:
              - Actions
              - Actions
              Effect: Effect
              Resources:
              - Resources
              - Resources
            - Version: Version
              Actions:
              - Actions
              - Actions
              Effect: Effect
              Resources:
              - Resources
              - Resources
            name: name
            id: id
          ServiceType: true
          SubAccounts:
          - Uid: Uid
            Hocon: Hocon
            Activated: true
            GroupIds:
            - GroupIds
            - GroupIds
            Username: Username
            FullName: FullName
          - Uid: Uid
            Hocon: Hocon
            Activated: true
            GroupIds:
            - GroupIds
            - GroupIds
            Username: Username
            FullName: FullName
          FullName: true
          Regions:
          - Uid: Uid
            Region: Region
            IpNumber: 0.8008281904610115
          - Uid: Uid
            Region: Region
            IpNumber: 0.8008281904610115
          Deployed: true
        - Uid: Uid
          Hocon: Hocon
          Activated: true
          Email: Email
          Readonly: true
          Username: Username
          Groups:
          - permissions:
            - Version: Version
              Actions:
              - Actions
              - Actions
              Effect: Effect
              Resources:
              - Resources
              - Resources
            - Version: Version
              Actions:
              - Actions
              - Actions
              Effect: Effect
              Resources:
              - Resources
              - Resources
            name: name
            id: id
          - permissions:
            - Version: Version
              Actions:
              - Actions
              - Actions
              Effect: Effect
              Resources:
              - Resources
              - Resources
            - Version: Version
              Actions:
              - Actions
              - Actions
              Effect: Effect
              Resources:
              - Resources
              - Resources
            name: name
            id: id
          ServiceType: true
          SubAccounts:
          - Uid: Uid
            Hocon: Hocon
            Activated: true
            GroupIds:
            - GroupIds
            - GroupIds
            Username: Username
            FullName: FullName
          - Uid: Uid
            Hocon: Hocon
            Activated: true
            GroupIds:
            - GroupIds
            - GroupIds
            Username: Username
            FullName: FullName
          FullName: true
          Regions:
          - Uid: Uid
            Region: Region
            IpNumber: 0.8008281904610115
          - Uid: Uid
            Region: Region
            IpNumber: 0.8008281904610115
          Deployed: true
      properties:
        Users:
          items:
            $ref: '#/components/schemas/inline_response_200_1_Users'
          type: array
      type: object
    _user_createSubAccount_UserInfoBlock:
      properties:
        UserName:
          type: string
        FullName:
          type: string
        Email:
          type: string
      type: object
    inline_object_7:
      properties:
        UserInfoBlock:
          $ref: '#/components/schemas/_user_createSubAccount_UserInfoBlock'
        GroupsIds:
          items:
            type: string
          type: array
        Password:
          type: string
        Hocon:
          description: |
            used to override or set internal fields of the sub-account (please work with ChaosSearch support to use)
          items:
            type: string
          type: array
      required:
      - Email
      - FullName
      - UserName
      type: object
    inline_response_201:
      example:
        Uid: Uid
        Exists: true
      properties:
        Uid:
          description: |
            The identifier of the sub-account
          type: string
        Exists:
          description: |
            true if the sub-account exists after call, false otherwise
          type: boolean
      type: object
    inline_object_8:
      properties:
        Username:
          example: foo@bar.com
          type: string
      type: object
    inline_response_200_2:
      example:
        Exists: true
      properties:
        Exists:
          description: |
            true if the sub-account exists after call, false otherwise
          type: boolean
      type: object
    _user_groups_permissions:
      example:
        Action: kibana:*
        Effect: Allow
        Resources: crn:view:::foo-view
      properties:
        Effect:
          example: Allow
          type: string
        Action:
          example: kibana:*
          type: string
        Resources:
          example: crn:view:::foo-view
          type: string
      type: object
    inline_response_200_3:
      example:
        permissions:
        - Action: kibana:*
          Effect: Allow
          Resources: crn:view:::foo-view
        - Action: kibana:*
          Effect: Allow
          Resources: crn:view:::foo-view
        name: Foo
        id: 7db91912-a3e9-4641-873c-3deccd07484c
      properties:
        id:
          example: 7db91912-a3e9-4641-873c-3deccd07484c
          type: string
        name:
          example: Foo
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/_user_groups_permissions'
          type: array
      type: object
    _user_groups_permissions_1:
      example:
        Action: kibana:*
        Effect: Allow
        Resources: crn:view:::foo-view
      properties:
        Effect:
          description: |
            The type of effect for the permission of this container, Allow or Deny
          example: Allow
          type: string
        Action:
          description: "The action(s) to which this container applies\n\n| Action\
            \ | Definition|\n|--------|-----------|\n| * |\tAll-access |\n| s3:* |\
            \ Ability to access S3 if given permissions in the IAM Policy and API\
            \ calls to the Chaos Index |\n| s3:aws:* | Ability to access S3 if given\
            \ permissions in the IAM Policy |\n| s3:chaos:* | Ability to access the\
            \ ChaosSearch Admin API |\n| elastic:* | Ability to access the Elasticsearch\
            \ API |\n| elastic:opendistro:* | Ability to access the Elasticsearch\
            \ API |\n| chaos:* | Ability to access all replica, query, and theme settings\
            \ |\n| chaos:replica:* | Ability to access all replica information (i.e.\
            \ compute allocation), initiate burst and see the compute status |\n|\
            \ chaos:replica:burst | Ability to click burst |\n| chaos:replica:status\
            \ | Ability to see how many compute resources are allocated |\n| chaos:query:*\
            \ | Full access to query permissions |\n| chaos:query:status | Ability\
            \ to access the Query progress bar |\n| chaos:query:migrate |  |\n| chaos:query:cancel\
            \ | Ability to Cancel a query |\n| chaos:query:pause |  |\n| chaos:theme:user\
            \ | Ability to change the color scheme of the ChaosSearch UI |\n| kibana:*\
            \ | Full access to Kibana permissions |\n| kibana-settings:read | Ability\
            \ to access Visualizations and Dashboards |\n| kibana-settings:write |\
            \ Ability to create Visualizations and Dashboards |\n| kibana-opendistro:*\
            \ | Ability to create Alerts |\n| ui:* | Full access to the ChaosSearch\
            \ UI |\n| ui:storage | Ability to access the Storage |\n| ui:refinery\
            \ | Ability to access the Refinery |\n| ui:analytics | Ability to access\
            \ the Analytics |\n| ui:dashboard | Ability to access the Dashboard |\n"
          example: kibana:*
          type: string
        Resources:
          description: |
            The resource(s) to which this container applies
          example: crn:view:::foo-view
          type: string
      required:
      - Action
      - Effect
      - Resources
      type: object
    InlineObject:
      example:
        permissions:
        - Action: kibana:*
          Effect: Allow
          Resources: crn:view:::foo-view
        - Action: kibana:*
          Effect: Allow
          Resources: crn:view:::foo-view
        name: Foo
        id: 7db91912-a3e9-4641-873c-3deccd07484c
      properties:
        id:
          example: 7db91912-a3e9-4641-873c-3deccd07484c
          type: string
        name:
          example: Foo
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/_user_groups_permissions_1'
          type: array
      type: object
    inline_response_201_1_permissions:
      example:
        Action: kibana:*
        Effect: Allow
        Resources: crn:view:::foo-view
      properties:
        Effect:
          description: |
            The type of effect for the permission of this container, Allow or Deny
          example: Allow
          type: string
        Action:
          description: "The action(s) to which this container applies\n\n| Action\
            \ | Definition|\n|--------|-----------|\n| * |\tAll-access |\n| s3:* |\
            \ Ability to access S3 if given permissions in the IAM Policy and API\
            \ calls to the Chaos Index |\n| s3:aws:* | Ability to access S3 if given\
            \ permissions in the IAM Policy |\n| s3:chaos:* | Ability to access the\
            \ ChaosSearch Admin API |\n| elastic:* | Ability to access the Elasticsearch\
            \ API |\n| elastic:opendistro:* | Ability to access the Elasticsearch\
            \ API |\n| chaos:* | Ability to access all replica, query, and theme settings\
            \ |\n| chaos:replica:* | Ability to access all replica information (i.e.\
            \ compute allocation), initiate burst and see the compute status |\n|\
            \ chaos:replica:burst | Ability to click burst |\n| chaos:replica:status\
            \ | Ability to see how many compute resources are allocated |\n| chaos:query:*\
            \ | Full access to query permissions |\n| chaos:query:status | Ability\
            \ to access the Query progress bar |\n| chaos:query:migrate |  |\n| chaos:query:cancel\
            \ | Ability to Cancel a query |\n| chaos:query:pause |  |\n| chaos:theme:user\
            \ | Ability to change the color scheme of the ChaosSearch UI |\n| kibana:*\
            \ | Full access to Kibana permissions |\n| kibana-settings:read | Ability\
            \ to access Visualizations and Dashboards |\n| kibana-settings:write |\
            \ Ability to create Visualizations and Dashboards |\n| kibana-opendistro:*\
            \ | Ability to create Alerts |\n| ui:* | Full access to the ChaosSearch\
            \ UI |\n| ui:storage | Ability to access the Storage |\n| ui:refinery\
            \ | Ability to access the Refinery |\n| ui:analytics | Ability to access\
            \ the Analytics |\n| ui:dashboard | Ability to access the Dashboard |\n"
          example: kibana:*
          type: string
        Resources:
          description: |
            The resource(s) to which this container applies
          example: crn:view:::foo-view
          type: string
      type: object
    inline_response_201_1:
      example:
        permissions:
        - Action: kibana:*
          Effect: Allow
          Resources: crn:view:::foo-view
        - Action: kibana:*
          Effect: Allow
          Resources: crn:view:::foo-view
        name: Foo
        id: 7db91912-a3e9-4641-873c-3deccd07484c
      properties:
        id:
          example: 7db91912-a3e9-4641-873c-3deccd07484c
          type: string
        name:
          example: Foo
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/inline_response_201_1_permissions'
          type: array
      type: object

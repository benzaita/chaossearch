/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserGroupsPermissions1 struct for UserGroupsPermissions1
type UserGroupsPermissions1 struct {
	// The type of effect for the permission of this container, Allow or Deny 
	Effect string `json:"Effect"`
	// The action(s) to which this container applies  | Action | Definition| |--------|-----------| | * | All-access | | s3:* | Ability to access S3 if given permissions in the IAM Policy and API calls to the Chaos Index | | s3:aws:* | Ability to access S3 if given permissions in the IAM Policy | | s3:chaos:* | Ability to access the ChaosSearch Admin API | | elastic:* | Ability to access the Elasticsearch API | | elastic:opendistro:* | Ability to access the Elasticsearch API | | chaos:* | Ability to access all replica, query, and theme settings | | chaos:replica:* | Ability to access all replica information (i.e. compute allocation), initiate burst and see the compute status | | chaos:replica:burst | Ability to click burst | | chaos:replica:status | Ability to see how many compute resources are allocated | | chaos:query:* | Full access to query permissions | | chaos:query:status | Ability to access the Query progress bar | | chaos:query:migrate |  | | chaos:query:cancel | Ability to Cancel a query | | chaos:query:pause |  | | chaos:theme:user | Ability to change the color scheme of the ChaosSearch UI | | kibana:* | Full access to Kibana permissions | | kibana-settings:read | Ability to access Visualizations and Dashboards | | kibana-settings:write | Ability to create Visualizations and Dashboards | | kibana-opendistro:* | Ability to create Alerts | | ui:* | Full access to the ChaosSearch UI | | ui:storage | Ability to access the Storage | | ui:refinery | Ability to access the Refinery | | ui:analytics | Ability to access the Analytics | | ui:dashboard | Ability to access the Dashboard | 
	Action string `json:"Action"`
	// The resource(s) to which this container applies 
	Resources string `json:"Resources"`
}

// NewUserGroupsPermissions1 instantiates a new UserGroupsPermissions1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGroupsPermissions1(effect string, action string, resources string, ) *UserGroupsPermissions1 {
	this := UserGroupsPermissions1{}
	this.Effect = effect
	this.Action = action
	this.Resources = resources
	return &this
}

// NewUserGroupsPermissions1WithDefaults instantiates a new UserGroupsPermissions1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGroupsPermissions1WithDefaults() *UserGroupsPermissions1 {
	this := UserGroupsPermissions1{}
	return &this
}

// GetEffect returns the Effect field value
func (o *UserGroupsPermissions1) GetEffect() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *UserGroupsPermissions1) GetEffectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Effect, true
}

// SetEffect sets field value
func (o *UserGroupsPermissions1) SetEffect(v string) {
	o.Effect = v
}

// GetAction returns the Action field value
func (o *UserGroupsPermissions1) GetAction() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *UserGroupsPermissions1) GetActionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *UserGroupsPermissions1) SetAction(v string) {
	o.Action = v
}

// GetResources returns the Resources field value
func (o *UserGroupsPermissions1) GetResources() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *UserGroupsPermissions1) GetResourcesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Resources, true
}

// SetResources sets field value
func (o *UserGroupsPermissions1) SetResources(v string) {
	o.Resources = v
}

func (o UserGroupsPermissions1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Effect"] = o.Effect
	}
	if true {
		toSerialize["Action"] = o.Action
	}
	if true {
		toSerialize["Resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableUserGroupsPermissions1 struct {
	value *UserGroupsPermissions1
	isSet bool
}

func (v NullableUserGroupsPermissions1) Get() *UserGroupsPermissions1 {
	return v.value
}

func (v *NullableUserGroupsPermissions1) Set(val *UserGroupsPermissions1) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGroupsPermissions1) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGroupsPermissions1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGroupsPermissions1(val *UserGroupsPermissions1) *NullableUserGroupsPermissions1 {
	return &NullableUserGroupsPermissions1{value: val, isSet: true}
}

func (v NullableUserGroupsPermissions1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGroupsPermissions1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



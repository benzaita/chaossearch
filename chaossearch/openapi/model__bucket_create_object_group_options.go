/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BucketCreateObjectGroupOptions struct for BucketCreateObjectGroupOptions
type BucketCreateObjectGroupOptions struct {
	// Ignore Irregular Objects while indexing a bucket (deprecated)  This setting should always be set `true`. 
	IgnoreIrregular bool `json:"ignoreIrregular"`
	// Compression algorithm used to compress the Object stored in S3, used by ChaosSearch to decompress the archive for indexing.  **NOTE:** Do not supply this key if the Objects in the bucket are not compressed 
	Compression *string `json:"compression,omitempty"`
	// Column Types can be used to override a given column's data type. Parsing of Objects will produce values of the overridden type  Example      \"colTypes\": { \"foo\": \"NUMBER\" }  The above example will override the data type of the column named \"foo\" so its value will be a NUMBER 
	ColTypes *map[string]interface{} `json:"colTypes,omitempty"`
}

// NewBucketCreateObjectGroupOptions instantiates a new BucketCreateObjectGroupOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketCreateObjectGroupOptions(ignoreIrregular bool, ) *BucketCreateObjectGroupOptions {
	this := BucketCreateObjectGroupOptions{}
	this.IgnoreIrregular = ignoreIrregular
	return &this
}

// NewBucketCreateObjectGroupOptionsWithDefaults instantiates a new BucketCreateObjectGroupOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketCreateObjectGroupOptionsWithDefaults() *BucketCreateObjectGroupOptions {
	this := BucketCreateObjectGroupOptions{}
	return &this
}

// GetIgnoreIrregular returns the IgnoreIrregular field value
func (o *BucketCreateObjectGroupOptions) GetIgnoreIrregular() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.IgnoreIrregular
}

// GetIgnoreIrregularOk returns a tuple with the IgnoreIrregular field value
// and a boolean to check if the value has been set.
func (o *BucketCreateObjectGroupOptions) GetIgnoreIrregularOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IgnoreIrregular, true
}

// SetIgnoreIrregular sets field value
func (o *BucketCreateObjectGroupOptions) SetIgnoreIrregular(v bool) {
	o.IgnoreIrregular = v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *BucketCreateObjectGroupOptions) GetCompression() string {
	if o == nil || o.Compression == nil {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketCreateObjectGroupOptions) GetCompressionOk() (*string, bool) {
	if o == nil || o.Compression == nil {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *BucketCreateObjectGroupOptions) HasCompression() bool {
	if o != nil && o.Compression != nil {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *BucketCreateObjectGroupOptions) SetCompression(v string) {
	o.Compression = &v
}

// GetColTypes returns the ColTypes field value if set, zero value otherwise.
func (o *BucketCreateObjectGroupOptions) GetColTypes() map[string]interface{} {
	if o == nil || o.ColTypes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ColTypes
}

// GetColTypesOk returns a tuple with the ColTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketCreateObjectGroupOptions) GetColTypesOk() (*map[string]interface{}, bool) {
	if o == nil || o.ColTypes == nil {
		return nil, false
	}
	return o.ColTypes, true
}

// HasColTypes returns a boolean if a field has been set.
func (o *BucketCreateObjectGroupOptions) HasColTypes() bool {
	if o != nil && o.ColTypes != nil {
		return true
	}

	return false
}

// SetColTypes gets a reference to the given map[string]interface{} and assigns it to the ColTypes field.
func (o *BucketCreateObjectGroupOptions) SetColTypes(v map[string]interface{}) {
	o.ColTypes = &v
}

func (o BucketCreateObjectGroupOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ignoreIrregular"] = o.IgnoreIrregular
	}
	if o.Compression != nil {
		toSerialize["compression"] = o.Compression
	}
	if o.ColTypes != nil {
		toSerialize["colTypes"] = o.ColTypes
	}
	return json.Marshal(toSerialize)
}

type NullableBucketCreateObjectGroupOptions struct {
	value *BucketCreateObjectGroupOptions
	isSet bool
}

func (v NullableBucketCreateObjectGroupOptions) Get() *BucketCreateObjectGroupOptions {
	return v.value
}

func (v *NullableBucketCreateObjectGroupOptions) Set(val *BucketCreateObjectGroupOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketCreateObjectGroupOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketCreateObjectGroupOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketCreateObjectGroupOptions(val *BucketCreateObjectGroupOptions) *NullableBucketCreateObjectGroupOptions {
	return &NullableBucketCreateObjectGroupOptions{value: val, isSet: true}
}

func (v NullableBucketCreateObjectGroupOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketCreateObjectGroupOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



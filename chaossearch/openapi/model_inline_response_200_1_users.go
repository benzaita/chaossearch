/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2001Users struct for InlineResponse2001Users
type InlineResponse2001Users struct {
	Uid *string `json:"Uid,omitempty"`
	Username *string `json:"Username,omitempty"`
	Hocon *string `json:"Hocon,omitempty"`
	Activated *bool `json:"Activated,omitempty"`
	Regions *[]InlineResponse2001Regions `json:"Regions,omitempty"`
	Deployed *bool `json:"Deployed,omitempty"`
	Email *string `json:"Email,omitempty"`
	Groups *[]InlineResponse2001Groups `json:"Groups,omitempty"`
	Readonly *bool `json:"Readonly,omitempty"`
	SubAccounts *[]InlineResponse2001SubAccounts `json:"SubAccounts,omitempty"`
	ServiceType *bool `json:"ServiceType,omitempty"`
	FullName *bool `json:"FullName,omitempty"`
}

// NewInlineResponse2001Users instantiates a new InlineResponse2001Users object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2001Users() *InlineResponse2001Users {
	this := InlineResponse2001Users{}
	return &this
}

// NewInlineResponse2001UsersWithDefaults instantiates a new InlineResponse2001Users object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2001UsersWithDefaults() *InlineResponse2001Users {
	this := InlineResponse2001Users{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *InlineResponse2001Users) SetUid(v string) {
	o.Uid = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *InlineResponse2001Users) SetUsername(v string) {
	o.Username = &v
}

// GetHocon returns the Hocon field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetHocon() string {
	if o == nil || o.Hocon == nil {
		var ret string
		return ret
	}
	return *o.Hocon
}

// GetHoconOk returns a tuple with the Hocon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetHoconOk() (*string, bool) {
	if o == nil || o.Hocon == nil {
		return nil, false
	}
	return o.Hocon, true
}

// HasHocon returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasHocon() bool {
	if o != nil && o.Hocon != nil {
		return true
	}

	return false
}

// SetHocon gets a reference to the given string and assigns it to the Hocon field.
func (o *InlineResponse2001Users) SetHocon(v string) {
	o.Hocon = &v
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetActivated() bool {
	if o == nil || o.Activated == nil {
		var ret bool
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetActivatedOk() (*bool, bool) {
	if o == nil || o.Activated == nil {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasActivated() bool {
	if o != nil && o.Activated != nil {
		return true
	}

	return false
}

// SetActivated gets a reference to the given bool and assigns it to the Activated field.
func (o *InlineResponse2001Users) SetActivated(v bool) {
	o.Activated = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetRegions() []InlineResponse2001Regions {
	if o == nil || o.Regions == nil {
		var ret []InlineResponse2001Regions
		return ret
	}
	return *o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetRegionsOk() (*[]InlineResponse2001Regions, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []InlineResponse2001Regions and assigns it to the Regions field.
func (o *InlineResponse2001Users) SetRegions(v []InlineResponse2001Regions) {
	o.Regions = &v
}

// GetDeployed returns the Deployed field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetDeployed() bool {
	if o == nil || o.Deployed == nil {
		var ret bool
		return ret
	}
	return *o.Deployed
}

// GetDeployedOk returns a tuple with the Deployed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetDeployedOk() (*bool, bool) {
	if o == nil || o.Deployed == nil {
		return nil, false
	}
	return o.Deployed, true
}

// HasDeployed returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasDeployed() bool {
	if o != nil && o.Deployed != nil {
		return true
	}

	return false
}

// SetDeployed gets a reference to the given bool and assigns it to the Deployed field.
func (o *InlineResponse2001Users) SetDeployed(v bool) {
	o.Deployed = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *InlineResponse2001Users) SetEmail(v string) {
	o.Email = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetGroups() []InlineResponse2001Groups {
	if o == nil || o.Groups == nil {
		var ret []InlineResponse2001Groups
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetGroupsOk() (*[]InlineResponse2001Groups, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []InlineResponse2001Groups and assigns it to the Groups field.
func (o *InlineResponse2001Users) SetGroups(v []InlineResponse2001Groups) {
	o.Groups = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetReadonly() bool {
	if o == nil || o.Readonly == nil {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetReadonlyOk() (*bool, bool) {
	if o == nil || o.Readonly == nil {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasReadonly() bool {
	if o != nil && o.Readonly != nil {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *InlineResponse2001Users) SetReadonly(v bool) {
	o.Readonly = &v
}

// GetSubAccounts returns the SubAccounts field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetSubAccounts() []InlineResponse2001SubAccounts {
	if o == nil || o.SubAccounts == nil {
		var ret []InlineResponse2001SubAccounts
		return ret
	}
	return *o.SubAccounts
}

// GetSubAccountsOk returns a tuple with the SubAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetSubAccountsOk() (*[]InlineResponse2001SubAccounts, bool) {
	if o == nil || o.SubAccounts == nil {
		return nil, false
	}
	return o.SubAccounts, true
}

// HasSubAccounts returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasSubAccounts() bool {
	if o != nil && o.SubAccounts != nil {
		return true
	}

	return false
}

// SetSubAccounts gets a reference to the given []InlineResponse2001SubAccounts and assigns it to the SubAccounts field.
func (o *InlineResponse2001Users) SetSubAccounts(v []InlineResponse2001SubAccounts) {
	o.SubAccounts = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetServiceType() bool {
	if o == nil || o.ServiceType == nil {
		var ret bool
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetServiceTypeOk() (*bool, bool) {
	if o == nil || o.ServiceType == nil {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasServiceType() bool {
	if o != nil && o.ServiceType != nil {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given bool and assigns it to the ServiceType field.
func (o *InlineResponse2001Users) SetServiceType(v bool) {
	o.ServiceType = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *InlineResponse2001Users) GetFullName() bool {
	if o == nil || o.FullName == nil {
		var ret bool
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Users) GetFullNameOk() (*bool, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *InlineResponse2001Users) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given bool and assigns it to the FullName field.
func (o *InlineResponse2001Users) SetFullName(v bool) {
	o.FullName = &v
}

func (o InlineResponse2001Users) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["Uid"] = o.Uid
	}
	if o.Username != nil {
		toSerialize["Username"] = o.Username
	}
	if o.Hocon != nil {
		toSerialize["Hocon"] = o.Hocon
	}
	if o.Activated != nil {
		toSerialize["Activated"] = o.Activated
	}
	if o.Regions != nil {
		toSerialize["Regions"] = o.Regions
	}
	if o.Deployed != nil {
		toSerialize["Deployed"] = o.Deployed
	}
	if o.Email != nil {
		toSerialize["Email"] = o.Email
	}
	if o.Groups != nil {
		toSerialize["Groups"] = o.Groups
	}
	if o.Readonly != nil {
		toSerialize["Readonly"] = o.Readonly
	}
	if o.SubAccounts != nil {
		toSerialize["SubAccounts"] = o.SubAccounts
	}
	if o.ServiceType != nil {
		toSerialize["ServiceType"] = o.ServiceType
	}
	if o.FullName != nil {
		toSerialize["FullName"] = o.FullName
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2001Users struct {
	value *InlineResponse2001Users
	isSet bool
}

func (v NullableInlineResponse2001Users) Get() *InlineResponse2001Users {
	return v.value
}

func (v *NullableInlineResponse2001Users) Set(val *InlineResponse2001Users) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2001Users) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2001Users) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2001Users(val *InlineResponse2001Users) *NullableInlineResponse2001Users {
	return &NullableInlineResponse2001Users{value: val, isSet: true}
}

func (v NullableInlineResponse2001Users) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2001Users) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



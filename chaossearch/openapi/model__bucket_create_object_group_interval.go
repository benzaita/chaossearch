/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BucketCreateObjectGroupInterval The index interval (daily) may be enabled by passing a value of 0 for the mode and column. Otherwise there will be no index interval (a single file will be produced)  **NOTE:** To disable the interval do not supply this key. 
type BucketCreateObjectGroupInterval struct {
	Mode int32 `json:"mode"`
	Column int32 `json:"column"`
}

// NewBucketCreateObjectGroupInterval instantiates a new BucketCreateObjectGroupInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketCreateObjectGroupInterval(mode int32, column int32, ) *BucketCreateObjectGroupInterval {
	this := BucketCreateObjectGroupInterval{}
	this.Mode = mode
	this.Column = column
	return &this
}

// NewBucketCreateObjectGroupIntervalWithDefaults instantiates a new BucketCreateObjectGroupInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketCreateObjectGroupIntervalWithDefaults() *BucketCreateObjectGroupInterval {
	this := BucketCreateObjectGroupInterval{}
	return &this
}

// GetMode returns the Mode field value
func (o *BucketCreateObjectGroupInterval) GetMode() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *BucketCreateObjectGroupInterval) GetModeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *BucketCreateObjectGroupInterval) SetMode(v int32) {
	o.Mode = v
}

// GetColumn returns the Column field value
func (o *BucketCreateObjectGroupInterval) GetColumn() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Column
}

// GetColumnOk returns a tuple with the Column field value
// and a boolean to check if the value has been set.
func (o *BucketCreateObjectGroupInterval) GetColumnOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Column, true
}

// SetColumn sets field value
func (o *BucketCreateObjectGroupInterval) SetColumn(v int32) {
	o.Column = v
}

func (o BucketCreateObjectGroupInterval) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mode"] = o.Mode
	}
	if true {
		toSerialize["column"] = o.Column
	}
	return json.Marshal(toSerialize)
}

type NullableBucketCreateObjectGroupInterval struct {
	value *BucketCreateObjectGroupInterval
	isSet bool
}

func (v NullableBucketCreateObjectGroupInterval) Get() *BucketCreateObjectGroupInterval {
	return v.value
}

func (v *NullableBucketCreateObjectGroupInterval) Set(val *BucketCreateObjectGroupInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketCreateObjectGroupInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketCreateObjectGroupInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketCreateObjectGroupInterval(val *BucketCreateObjectGroupInterval) *NullableBucketCreateObjectGroupInterval {
	return &NullableBucketCreateObjectGroupInterval{value: val, isSet: true}
}

func (v NullableBucketCreateObjectGroupInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketCreateObjectGroupInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



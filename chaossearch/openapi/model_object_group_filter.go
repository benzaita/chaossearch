/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ObjectGroupFilter struct for ObjectGroupFilter
type ObjectGroupFilter struct {
	// Filter predicates to be applied to an Object key (requires either prefix or regex property) 
	Field string `json:"field"`
	// A regular expression predicate to be applied to a key 
	Regex *string `json:"regex,omitempty"`
	// A regular expression predicate to be applied to the prefix of a key 
	Prefix *string `json:"prefix,omitempty"`
}

// NewObjectGroupFilter instantiates a new ObjectGroupFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectGroupFilter(field string, ) *ObjectGroupFilter {
	this := ObjectGroupFilter{}
	this.Field = field
	return &this
}

// NewObjectGroupFilterWithDefaults instantiates a new ObjectGroupFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectGroupFilterWithDefaults() *ObjectGroupFilter {
	this := ObjectGroupFilter{}
	return &this
}

// GetField returns the Field field value
func (o *ObjectGroupFilter) GetField() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *ObjectGroupFilter) GetFieldOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *ObjectGroupFilter) SetField(v string) {
	o.Field = v
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *ObjectGroupFilter) GetRegex() string {
	if o == nil || o.Regex == nil {
		var ret string
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectGroupFilter) GetRegexOk() (*string, bool) {
	if o == nil || o.Regex == nil {
		return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *ObjectGroupFilter) HasRegex() bool {
	if o != nil && o.Regex != nil {
		return true
	}

	return false
}

// SetRegex gets a reference to the given string and assigns it to the Regex field.
func (o *ObjectGroupFilter) SetRegex(v string) {
	o.Regex = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ObjectGroupFilter) GetPrefix() string {
	if o == nil || o.Prefix == nil {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectGroupFilter) GetPrefixOk() (*string, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ObjectGroupFilter) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ObjectGroupFilter) SetPrefix(v string) {
	o.Prefix = &v
}

func (o ObjectGroupFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["field"] = o.Field
	}
	if o.Regex != nil {
		toSerialize["regex"] = o.Regex
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	return json.Marshal(toSerialize)
}

type NullableObjectGroupFilter struct {
	value *ObjectGroupFilter
	isSet bool
}

func (v NullableObjectGroupFilter) Get() *ObjectGroupFilter {
	return v.value
}

func (v *NullableObjectGroupFilter) Set(val *ObjectGroupFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectGroupFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectGroupFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectGroupFilter(val *ObjectGroupFilter) *NullableObjectGroupFilter {
	return &NullableObjectGroupFilter{value: val, isSet: true}
}

func (v NullableObjectGroupFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectGroupFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



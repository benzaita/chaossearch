/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OutputField struct for OutputField
type OutputField struct {
	// A name for a given field
	Name string `json:"name"`
	// A type for a given field
	Type string `json:"type"`
}

// NewOutputField instantiates a new OutputField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputField(name string, type_ string, ) *OutputField {
	this := OutputField{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewOutputFieldWithDefaults instantiates a new OutputField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputFieldWithDefaults() *OutputField {
	this := OutputField{}
	return &this
}

// GetName returns the Name field value
func (o *OutputField) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OutputField) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OutputField) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *OutputField) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OutputField) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OutputField) SetType(v string) {
	o.Type = v
}

func (o OutputField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableOutputField struct {
	value *OutputField
	isSet bool
}

func (v NullableOutputField) Get() *OutputField {
	return v.value
}

func (v *NullableOutputField) Set(val *OutputField) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputField) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputField(val *OutputField) *NullableOutputField {
	return &NullableOutputField{value: val, isSet: true}
}

func (v NullableOutputField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2001Regions struct for InlineResponse2001Regions
type InlineResponse2001Regions struct {
	Region *string `json:"Region,omitempty"`
	Uid *string `json:"Uid,omitempty"`
	IpNumber *float32 `json:"IpNumber,omitempty"`
}

// NewInlineResponse2001Regions instantiates a new InlineResponse2001Regions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2001Regions() *InlineResponse2001Regions {
	this := InlineResponse2001Regions{}
	return &this
}

// NewInlineResponse2001RegionsWithDefaults instantiates a new InlineResponse2001Regions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2001RegionsWithDefaults() *InlineResponse2001Regions {
	this := InlineResponse2001Regions{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *InlineResponse2001Regions) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Regions) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *InlineResponse2001Regions) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *InlineResponse2001Regions) SetRegion(v string) {
	o.Region = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *InlineResponse2001Regions) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Regions) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *InlineResponse2001Regions) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *InlineResponse2001Regions) SetUid(v string) {
	o.Uid = &v
}

// GetIpNumber returns the IpNumber field value if set, zero value otherwise.
func (o *InlineResponse2001Regions) GetIpNumber() float32 {
	if o == nil || o.IpNumber == nil {
		var ret float32
		return ret
	}
	return *o.IpNumber
}

// GetIpNumberOk returns a tuple with the IpNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Regions) GetIpNumberOk() (*float32, bool) {
	if o == nil || o.IpNumber == nil {
		return nil, false
	}
	return o.IpNumber, true
}

// HasIpNumber returns a boolean if a field has been set.
func (o *InlineResponse2001Regions) HasIpNumber() bool {
	if o != nil && o.IpNumber != nil {
		return true
	}

	return false
}

// SetIpNumber gets a reference to the given float32 and assigns it to the IpNumber field.
func (o *InlineResponse2001Regions) SetIpNumber(v float32) {
	o.IpNumber = &v
}

func (o InlineResponse2001Regions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Region != nil {
		toSerialize["Region"] = o.Region
	}
	if o.Uid != nil {
		toSerialize["Uid"] = o.Uid
	}
	if o.IpNumber != nil {
		toSerialize["IpNumber"] = o.IpNumber
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2001Regions struct {
	value *InlineResponse2001Regions
	isSet bool
}

func (v NullableInlineResponse2001Regions) Get() *InlineResponse2001Regions {
	return v.value
}

func (v *NullableInlineResponse2001Regions) Set(val *InlineResponse2001Regions) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2001Regions) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2001Regions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2001Regions(val *InlineResponse2001Regions) *NullableInlineResponse2001Regions {
	return &NullableInlineResponse2001Regions{value: val, isSet: true}
}

func (v NullableInlineResponse2001Regions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2001Regions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject6 struct for InlineObject6
type InlineObject6 struct {
	BucketNames *[]string `json:"BucketNames,omitempty"`
}

// NewInlineObject6 instantiates a new InlineObject6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject6() *InlineObject6 {
	this := InlineObject6{}
	return &this
}

// NewInlineObject6WithDefaults instantiates a new InlineObject6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject6WithDefaults() *InlineObject6 {
	this := InlineObject6{}
	return &this
}

// GetBucketNames returns the BucketNames field value if set, zero value otherwise.
func (o *InlineObject6) GetBucketNames() []string {
	if o == nil || o.BucketNames == nil {
		var ret []string
		return ret
	}
	return *o.BucketNames
}

// GetBucketNamesOk returns a tuple with the BucketNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject6) GetBucketNamesOk() (*[]string, bool) {
	if o == nil || o.BucketNames == nil {
		return nil, false
	}
	return o.BucketNames, true
}

// HasBucketNames returns a boolean if a field has been set.
func (o *InlineObject6) HasBucketNames() bool {
	if o != nil && o.BucketNames != nil {
		return true
	}

	return false
}

// SetBucketNames gets a reference to the given []string and assigns it to the BucketNames field.
func (o *InlineObject6) SetBucketNames(v []string) {
	o.BucketNames = &v
}

func (o InlineObject6) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BucketNames != nil {
		toSerialize["BucketNames"] = o.BucketNames
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject6 struct {
	value *InlineObject6
	isSet bool
}

func (v NullableInlineObject6) Get() *InlineObject6 {
	return v.value
}

func (v *NullableInlineObject6) Set(val *InlineObject6) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject6) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject6(val *InlineObject6) *NullableInlineObject6 {
	return &NullableInlineObject6{value: val, isSet: true}
}

func (v NullableInlineObject6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



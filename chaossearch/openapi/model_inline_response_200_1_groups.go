/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2001Groups struct for InlineResponse2001Groups
type InlineResponse2001Groups struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Permissions *[]InlineResponse2001Permissions `json:"permissions,omitempty"`
}

// NewInlineResponse2001Groups instantiates a new InlineResponse2001Groups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2001Groups() *InlineResponse2001Groups {
	this := InlineResponse2001Groups{}
	return &this
}

// NewInlineResponse2001GroupsWithDefaults instantiates a new InlineResponse2001Groups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2001GroupsWithDefaults() *InlineResponse2001Groups {
	this := InlineResponse2001Groups{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineResponse2001Groups) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Groups) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineResponse2001Groups) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineResponse2001Groups) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse2001Groups) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Groups) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse2001Groups) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse2001Groups) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *InlineResponse2001Groups) GetPermissions() []InlineResponse2001Permissions {
	if o == nil || o.Permissions == nil {
		var ret []InlineResponse2001Permissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001Groups) GetPermissionsOk() (*[]InlineResponse2001Permissions, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *InlineResponse2001Groups) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []InlineResponse2001Permissions and assigns it to the Permissions field.
func (o *InlineResponse2001Groups) SetPermissions(v []InlineResponse2001Permissions) {
	o.Permissions = &v
}

func (o InlineResponse2001Groups) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2001Groups struct {
	value *InlineResponse2001Groups
	isSet bool
}

func (v NullableInlineResponse2001Groups) Get() *InlineResponse2001Groups {
	return v.value
}

func (v *NullableInlineResponse2001Groups) Set(val *InlineResponse2001Groups) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2001Groups) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2001Groups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2001Groups(val *InlineResponse2001Groups) *NullableInlineResponse2001Groups {
	return &NullableInlineResponse2001Groups{value: val, isSet: true}
}

func (v NullableInlineResponse2001Groups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2001Groups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * ChaosSearch API
 *
 * The ChaosSearch API is the administrative interface for the ChaosSearch service.  It is composed of ChaosSearch and AWS style interfaces (built to provide interoperability with the S3 service).  ChaosSearch admin API was originally modeled as an extension to the S3 API. Most of the API calls, parameters, etc will look familiar to those familiar with creating and managing S3 Buckets. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2001SubAccounts struct for InlineResponse2001SubAccounts
type InlineResponse2001SubAccounts struct {
	Uid *string `json:"Uid,omitempty"`
	Username *string `json:"Username,omitempty"`
	Hocon *string `json:"Hocon,omitempty"`
	Activated *bool `json:"Activated,omitempty"`
	GroupIds *[]string `json:"GroupIds,omitempty"`
	FullName *string `json:"FullName,omitempty"`
}

// NewInlineResponse2001SubAccounts instantiates a new InlineResponse2001SubAccounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2001SubAccounts() *InlineResponse2001SubAccounts {
	this := InlineResponse2001SubAccounts{}
	return &this
}

// NewInlineResponse2001SubAccountsWithDefaults instantiates a new InlineResponse2001SubAccounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2001SubAccountsWithDefaults() *InlineResponse2001SubAccounts {
	this := InlineResponse2001SubAccounts{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *InlineResponse2001SubAccounts) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001SubAccounts) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *InlineResponse2001SubAccounts) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *InlineResponse2001SubAccounts) SetUid(v string) {
	o.Uid = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *InlineResponse2001SubAccounts) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001SubAccounts) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *InlineResponse2001SubAccounts) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *InlineResponse2001SubAccounts) SetUsername(v string) {
	o.Username = &v
}

// GetHocon returns the Hocon field value if set, zero value otherwise.
func (o *InlineResponse2001SubAccounts) GetHocon() string {
	if o == nil || o.Hocon == nil {
		var ret string
		return ret
	}
	return *o.Hocon
}

// GetHoconOk returns a tuple with the Hocon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001SubAccounts) GetHoconOk() (*string, bool) {
	if o == nil || o.Hocon == nil {
		return nil, false
	}
	return o.Hocon, true
}

// HasHocon returns a boolean if a field has been set.
func (o *InlineResponse2001SubAccounts) HasHocon() bool {
	if o != nil && o.Hocon != nil {
		return true
	}

	return false
}

// SetHocon gets a reference to the given string and assigns it to the Hocon field.
func (o *InlineResponse2001SubAccounts) SetHocon(v string) {
	o.Hocon = &v
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *InlineResponse2001SubAccounts) GetActivated() bool {
	if o == nil || o.Activated == nil {
		var ret bool
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001SubAccounts) GetActivatedOk() (*bool, bool) {
	if o == nil || o.Activated == nil {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *InlineResponse2001SubAccounts) HasActivated() bool {
	if o != nil && o.Activated != nil {
		return true
	}

	return false
}

// SetActivated gets a reference to the given bool and assigns it to the Activated field.
func (o *InlineResponse2001SubAccounts) SetActivated(v bool) {
	o.Activated = &v
}

// GetGroupIds returns the GroupIds field value if set, zero value otherwise.
func (o *InlineResponse2001SubAccounts) GetGroupIds() []string {
	if o == nil || o.GroupIds == nil {
		var ret []string
		return ret
	}
	return *o.GroupIds
}

// GetGroupIdsOk returns a tuple with the GroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001SubAccounts) GetGroupIdsOk() (*[]string, bool) {
	if o == nil || o.GroupIds == nil {
		return nil, false
	}
	return o.GroupIds, true
}

// HasGroupIds returns a boolean if a field has been set.
func (o *InlineResponse2001SubAccounts) HasGroupIds() bool {
	if o != nil && o.GroupIds != nil {
		return true
	}

	return false
}

// SetGroupIds gets a reference to the given []string and assigns it to the GroupIds field.
func (o *InlineResponse2001SubAccounts) SetGroupIds(v []string) {
	o.GroupIds = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *InlineResponse2001SubAccounts) GetFullName() string {
	if o == nil || o.FullName == nil {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001SubAccounts) GetFullNameOk() (*string, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *InlineResponse2001SubAccounts) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *InlineResponse2001SubAccounts) SetFullName(v string) {
	o.FullName = &v
}

func (o InlineResponse2001SubAccounts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["Uid"] = o.Uid
	}
	if o.Username != nil {
		toSerialize["Username"] = o.Username
	}
	if o.Hocon != nil {
		toSerialize["Hocon"] = o.Hocon
	}
	if o.Activated != nil {
		toSerialize["Activated"] = o.Activated
	}
	if o.GroupIds != nil {
		toSerialize["GroupIds"] = o.GroupIds
	}
	if o.FullName != nil {
		toSerialize["FullName"] = o.FullName
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2001SubAccounts struct {
	value *InlineResponse2001SubAccounts
	isSet bool
}

func (v NullableInlineResponse2001SubAccounts) Get() *InlineResponse2001SubAccounts {
	return v.value
}

func (v *NullableInlineResponse2001SubAccounts) Set(val *InlineResponse2001SubAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2001SubAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2001SubAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2001SubAccounts(val *InlineResponse2001SubAccounts) *NullableInlineResponse2001SubAccounts {
	return &NullableInlineResponse2001SubAccounts{value: val, isSet: true}
}

func (v NullableInlineResponse2001SubAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2001SubAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



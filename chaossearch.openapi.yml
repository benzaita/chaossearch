openapi: 3.0.3
info:
  version: 1.0.0
  title: ChaosSearch API
  description: |
    The ChaosSearch API is the administrative interface for the ChaosSearch service.

    It is composed of ChaosSearch and AWS style interfaces
    (built to provide interoperability with the S3 service).

    ChaosSearch admin API was originally modeled as an extension to the S3 API.
    Most of the API calls, parameters, etc will look familiar to those familiar
    with creating and managing S3 Buckets.
paths:
  /Bucket/createObjectGroup:
    post:
      summary: Create a new Object Group
      description: |
        Create a new Object Group which is unique to the ChaosSearch service.

        In order to get a listing or delete Object Groups an S3 style endpoint is used (e.g. /V1/).

        The update API (see /Bucket/updateObjectGroup) is limited to a subset of fields, so it will be necessary to delete and create an Object Group in order to update all fields.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bucket:
                  type: string
                  description: |
                    Object Group name.

                    Object Group names can be any string without forward slash characters (path separators) Object Group names must be unique. Because Object Groups are
                    modeled in ChaosSearch as an S3 Bucket, as are Views, this name must be unique across any Bucket name.

                    Example
                    
                        "my-object-group-01"

                    For best compatibility names should comply with S3 bucket name restrictions:
                      * Bucket names must be between 3 and 63 characters long.
                      * Bucket names can consist only of lowercase letters, numbers, dots (.), and hyphens (-).
                      * Bucket names must begin and end with a letter or number.
                      * Bucket names must not be formatted as an IP address (for example, 192.168.5.4).
                      * Bucket names can't begin with xn-- (for buckets created after February 2020).

                    **NOTE:**
                      Internal bucket resources use a prefix of `cs` or `system.`. In order to prevent conflict buckets should
                      not be named with either prefix.

                source:
                  type: string
                  description: The name of the S3 Bucket that backs this Object Group.
                  example: my-bucket
                filter:
                  type: array
                  items:
                    $ref: '#/components/schemas/ObjectGroupFilter'
                  description: |
                    An Object Group filter is a predicate used to filter Objects that will be
                    indexed by the system.

                    Example:

                        "filter": [{"field":"key","regex":".*"}]

                    The above example filter instructs the system to apply the regex ".*" to the S3 keys of the Objects encountered by indexing. It will consider all Objects of the given Object Group when indexing.

                    Example:

                        "filter": {
                          "AND": [
                            {"field": "key","prefix": "foo/"},
                            {"field": "key","regex": ".*"}
                          ]
                        }

                    This example adds a prefix predicate. The predicates will be joined with a logical AND to produce the filter. As with the first example, it will be applied to each Object key of the Object Group. It will consider only Objects that have a prefix of "foo".

                    Example:

                        "filter": {
                          "OR": [
                            {"field": "key","prefix": "foo/"},
                            {"field": "key","regex": ".*"}
                          ]
                        }

                    An example that adjusts the previous example so Objects that either have the prefix of 'foo/' OR the key of '.*' will be accepted.

                format:
                    $ref: '#/components/schemas/Format'
                options:
                  type: object
                  properties:
                    ignoreIrregular:
                      type: boolean
                      description: |
                        Ignore Irregular Objects while indexing a bucket (deprecated)

                        This setting should always be set `true`.
                    compression:
                      type: string
                      enum:
                        - GZIP
                        - ZLIB
                        - SNAPPY
                      description: |
                        Compression algorithm used to compress the Object stored in S3, used by
                        ChaosSearch to decompress the archive for indexing.

                        **NOTE:** Do not supply this key if the Objects in the bucket are not compressed
                    colTypes:
                      type: object
                      description: |
                        Column Types can be used to override a given column's data type.
                        Parsing of Objects will produce values of the overridden type

                        Example
                        
                            "colTypes": { "foo": "NUMBER" }

                        The above example will override the data type of the column named "foo" so its value will be a NUMBER
                      example: { "foo": "NUMBER" }
                  required:
                    - ignoreIrregular
                liveEvents:
                  type: string
                  example: 'arn:aws:sqs:us-east-1:0123456789012:s3-notifications'
                  description: |
                    the ARN of the SQS queue that receives S3 Bucket event messages used by
                    ChaosSearch to index Objects as they are written.

                    Configuration of the SQS queue and bucket event notifications are done via
                    the AWS APIs.

                    Queues are not validated for correctness (i.e. correct permissions, queue
                    exists, etc)

                    When supplied the Object Group created is considered a Live index, otherwise it will be a static index.
                interval:
                  type: object
                  properties:
                    mode:
                      type: integer
                    column:
                      type: integer
                  required:
                    - mode
                    - column
                  description: |
                    The index interval (daily) may be enabled by passing a value of 0 for the
                    mode and column. Otherwise there will be no index interval (a single file
                    will be produced)

                    **NOTE:** To disable the interval do not supply this key.
                  example: { "mode": 0, "column": 0 }
                indexRetention:
                  allOf:
                    - $ref: '#/components/schemas/TimeWindow'
                    - description: The number of days data will be retained before it's deleted. To disable the retention policy (and keep data indefinitey) do NOT supply this key
                partitionBy:
                  type: string
                  example: "regex-with-(capture-group1)-(capture-group2)"
                  description: |
                    a regular expression with capture groups used to partition the indexes of the Object Group.

                    The regex is applied to each S3 key encountered by indexing. Partitions are created by taking the resulting strings from the capture groups. When no capture groups are matched for a given key the default partition is used.

                    Objects in the bucket that parse will be indexed regardless of a match against the partitionBy regex.

                    Example:

                        # Files on S3
                        1. /587656/blue/2020-10-15.json
                        2. /587656/blue/2020-10-16.json
                        3. /587656/green/2020-10-15.json
                        4. /587656/green/2020-10-16.json
                        5. /foo/blue/2020-10-15.json
                        6. /2020-10-16.json

                        partitionBy: "/([0-9]+)/(.*)/.*"

                        The regex will generate a partition of "587656" and "blue" for the
                        first two files, "587656" and "green" for the second two files, "blue"
                        for the fifth file, and the default partition for the sixth.
              required:
                - bucket
                - source
                - filter
                - contentType
                - format
                - options
              example:
                bucket: my-object-group
                source: my-s3-bucket
                format:
                  _type: "CSV"
                  horizontal: true
                  stripPrefix: false
                interval:
                  mode: 0
                  column: 0
                indexRetention: 14
                filter:
                  field: key
                  regex: '.*'
                options:
                  ignoreIrregular: false
                  compression: GZIP
      responses:
        '200':
          description: successful creation
        '400':
          $ref: '#/components/responses/DuplicateBucketError'
        '500':
          $ref: '#/components/responses/InvalidInputError'
  /Bucket/updateObjectGroup:
    post:
      summary: Update an existing Object Group
      description: Update an existing Object Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bucket:
                  type: string
                  description: Object Group Name
                indexRetention:
                  $ref: '#/components/schemas/TimeWindow'
                targetActiveIndex:
                  default: 1
                  type: integer
                  description: |
                    Allow overriding number of "irrevokable" leases on compute for tasks associated with in. Use with care.

                    Object Group indexing model uses a lease system to allocate workers (registered units) for indexing jobs. Each worker is allowed one
                    lease. By default an index for a given Object Group will require 1 lease in order to make progress. By setting the target active index
                    value to something larger than 1, the system will attempt to allocate more leases for indexing. If the system has no more leases to give,
                    the index will progress as long as it has at least 1 lease allocated.

                    By default the value is 1

                    ChaosSearch support should be enagaged to help tune this value for latency sensitive indexes.
              required:
                - bucket
      responses:
        '200':
          description: Successful update of existing Object Group
        '400':
          $ref: '#/components/responses/DuplicateBucketError'
        '500':
          $ref: '#/components/responses/InvalidInputError'
  /Bucket/createView:
    post:
      summary: Create a new View
      description: |
        Create a new View. A view is a virtual Object Group, comprising 1 or more Object Groups.

        Views add permissions, default time fields, etc

        To list or delete Views, an S3 style endpoint is used (e.g. /V1/).

        **NOTE:** The update API is limited to a subset of fields, necessary to delete and create a View in order to update all fields.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bucket:
                  type: string
                  description: View Name
                sources:
                  type: array
                  items:
                    type: string
                  description: |
                    The View's source of data, a list of Object Group Names.

                    IMPORTANT: An empty array means ALL Object Groups!

                    **NOTE:** View Name cannot be identical with an Object Group Name.
                indexPattern:
                  type: string
                  description: |
                    An Index Pattern (regex) that matches and filters source based on index names, practically speaking from Object Groups Names.

                    Example:

                        Object Group Name: foo
                        Resulting index names (for daily indexes):
                        _foo_2020-10-15_
                        _foo_2020-10-16_

                        Resulting index names:
                        _foo_
                caseInsensitive:
                  type: boolean
                  default: false
                  description: |
                    Flag to toggle case-sensitivity of searches of all values in the View

                    Example:

                        row: {"Foo": "Bar"}
                        Searching for "Bar" is treated case-insensitive, but keys such as "Foo" are still case-sensitive.
                indexRetention:
                  $ref: '#/components/schemas/ViewTimeWindow'
                transforms:
                  type: array
                  default: []
                  items:
                    $ref: '#/components/schemas/Transform'
                  description: transformations on fields used to produce new fields from existing ones
                filters:
                  description: |
                    TODO describe what and how filters work, especially predicates

                    Also, how to add AND, and OR logic here

                    Example log:

                        {
                          "system": "foo",
                          "type": "elb-access",
                          "stage": "staging",
                        }

                        User allowed to see all data where "system" = "foo", and "type" matches ".*(-access$)" but not
                        "stage" = "production".

                    Example:

                        "filter": {
                          "predicate": {
                              "field": "attrs.Cluster",
                              "query": "au-production",
                              "state": {
                                  "_type": "chaossumo.query.QEP.Predicate.TextMatchState.Exact"
                              },
                              "_type": "chaossumo.query.NIRFrontend.Request.Predicate.TextMatch"
                          }
                        }
              required:
                - bucket
                - sources
                - indexPattern
      responses:
        '200':
          description: Successful creation of View
        '400':
          $ref: '#/components/responses/DuplicateBucketError'
        '500':
          $ref: '#/components/responses/InvalidInputError'
  /Bucket/updateView:
    post:
      summary: Update an existing View
      description: Update an existing View
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bucket:
                  type: string
                  description: View Name
                indexRetention:
                  $ref: '#/components/schemas/ViewTimeWindow'
      responses:
        '200':
          description: Successful update of existing View
        '400':
          $ref: '#/components/responses/DuplicateBucketError'
        '500':
          $ref: '#/components/responses/InvalidInputError'
  /Bucket/partitionKeys:
    post:
      summary: Fetch the partition keys for a View, Object Group, or index
      description: Fetch the partition keys for a View, Object Group, or index
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bucket:
                  type: string
                  description: |
                    Can be the name of either a View, Object Group, or index.

                    View and Object Groups all resolve to an index (i.e. they are built on indexes),
                    this API accepts names of the resolved indexes or the by names of resources
                    that can be used to resolve them.
      responses:
        '200':
          description: Return a collection of keys for each partition that exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: array
                    default: []
                    items:
                      type: string
                      description: |
                        An array of partition capture group values.

                        The `partitionBy` attribute on an Object Group is what gives the partition
                        specification using regular expression capture groups. For any Object that
                        does not match any capture group of the regular expression it will go into
                        the `default` partition.

                        **NOTE:**
                          A key can be `default` if the partition regex didn’t match
        '400':
          description: The specified resource does not exist
        '500':
          $ref: '#/components/responses/InvalidInputError'
  /Bucket/model:
    post:
      summary: Send a control signal to the system to operate indexing
      description: |
        Send a control signal to the system to operate indexing
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                BucketName:
                  type: string
                  description: |
                    Object Group name
                ModelMode:
                  type: integer
                  description: |
                    Integer to represent the state(s) of the model

                    1 => Restart Indexing

                    0 => Start Indexing

                    -1 => Stop Indexing

                    -2 => Terminate Indexing
      responses:
        '200':
          description: successful state change
        '400':
          $ref: '#/components/responses/ModelSchemaFailure'
        '500':
          $ref: '#/components/responses/InvalidInputError'
  /Bucket/metadata:
    post:
      summary: Fetch bucket metadata that includes information regarding index statistics
      description: |
        Fetch bucket metadata that includes information regarding index statistics

        Example:

          {"BucketNames":["foo_object_group"]}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                BucketNames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: |
            Metadata of the given bucket(s)
        '500':
          $ref: '#/components/responses/InvalidInputError'
  /V1/:
    get:
      summary: List existing Object Groups
      description: List existing Object Groups
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulListing'
  /V1/{key}:
    delete:
      summary: Delete Views/Object Groups
      description: Delete Views/Object Groups
      parameters:
        - name: key
          description: |
            {key} can be a View Name, or an Object Group Name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful delete of Object Group
        '400':
          description: The specified resource does not exist

  /user/manifest:
    post:
      summary: Provide a manifest of all user related resources
      description: |
        Provide a manifest of all user related resources (e.g. sub-accounts, groups, etc)

        **NOTE:**
          This endpoint does not require a body, if provided make it empty
      responses:
        '200':
          description: |
            A JSON object with all user related resources of the given context

          content:
            application/json:
              schema:
                type: object
                properties:
                  Users:
                    type: array
                    items:
                      type: object
                      properties:
                        Uid:
                          type: string
                        Username:
                          type: string
                        Hocon:
                          type: string
                        Activated:
                          type: boolean
                        Regions:
                          type: array
                          items:
                            type: object
                            properties:
                              Region:
                                type: string
                              Uid:
                                type: string
                              IpNumber:
                                type: number
                        Deployed:
                          type: boolean
                        Email:
                          type: string
                        Groups:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
                              permissions:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    Version:
                                      type: string
                                    Effect:
                                      type: string
                                    Actions:
                                      type: array
                                      items:
                                        type: string
                                    Resources:
                                      type: array
                                      items:
                                        type: string
                        Readonly:
                          type: boolean
                        SubAccounts:
                          type: array
                          items:
                            type: object
                            properties:
                              Uid:
                                type: string
                              Username:
                                type: string
                              Hocon:
                                type: string
                              Activated:
                                type: boolean
                              GroupIds:
                                type: array
                                items:
                                  type: string
                              FullName:
                                type: string
                        ServiceType:
                          type: boolean
                        FullName:
                          type: boolean
  /user/createSubAccount:
    post:
      summary: Create or Edit a sub-account under the given user context
      description: |
        Create or Edit a sub-account under the given user context

        **NOTE:** This endpoint is also used to edit an existing sub-account

        The UID is returned by the service on a successful creation of a new sub-account is the identifier of the sub-account.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                UserInfoBlock:
                  type: object
                  properties:
                    UserName:
                      type: string
                    FullName:
                      type: string
                    Email:
                      type: string
                GroupsIds:
                  type: array
                  items:
                    type: string
                Password:
                  type: string
                Hocon:
                  description: |
                    used to override or set internal fields of the sub-account (please work with ChaosSearch support to use)
                  type: array
                  items:
                    type: string
              required:
                - UserName
                - FullName
                - Email
      responses:
        '201':
          description: |
            The created sub-account data

            Uid -> the UID of the sub-account

            Exists -> flag to signal whether the account already existed in the system prior to
                      the call (a value of `true` means the sub-account was modified)

          content:
            application/json:
              schema:
                type: object
                properties:
                  Uid:
                    type: string
                    description: |
                      The identifier of the sub-account
                  Exists:
                    type: boolean
                    description: |
                      true if the sub-account exists after call, false otherwise
        '400':
          description: |
            If required fields are not provided
        '500':
          $ref: '#/components/responses/InvalidInputError'
  /user/deleteSubAccount:
    post:
      summary: Delete a sub-account under the given user context
      description: |
        Delete a sub-account under the given user context
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Username:
                  type: string
                  example: "foo@bar.com"
      responses:
        '200':
          description: |
            A successful delete of the sub-account returns a value of `false` for the key of `Exists`

          content:
            application/json:
              schema:
                type: object
                properties:
                  Exists:
                    type: boolean
                    description: |
                      true if the sub-account exists after call, false otherwise
        '500':
          $ref: '#/components/responses/InvalidInputError'
  /user/groups:
    get:
      summary: Fetch all groups of this user context
      description: |
        Returns all of the group data of this user context

        Fetch all groups of this user context (every account contains a default group with
        access to all resources)
      responses:
        '200':
          description: |
            The groups of the user context
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "7db91912-a3e9-4641-873c-3deccd07484c"
                    name:
                      type: string
                      example: "Foo"
                    permissions:
                      type: array
                      items:
                        type: object
                        properties:
                          Effect:
                            type: string
                            example: "Allow"
                          Action:
                            type: string
                            example: "kibana:*"
                          Resources:
                            type: string
                            example: "crn:view:::foo-view"
    post:
      summary: Create new groups for this user context
      description: |
        Create new groups for this user context. The caller must provide a JSON body with all
        required group information to create new groups. The groups must not already exist in
        the user context. This call is atomic, either all of the groups in the JSON document
        succeed in being created, or none of them do.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: "7db91912-a3e9-4641-873c-3deccd07484c"
                  name:
                    type: string
                    example: "Foo"
                  permissions:
                    type: array
                    items:
                      type: object
                      properties:
                        Effect:
                          type: string
                          example: "Allow"
                          description: |
                            The type of effect for the permission of this container, Allow or Deny
                        Action:
                          type: string
                          example: "kibana:*"
                          description: |
                            The action(s) to which this container applies

                            | Action | Definition|
                            |--------|-----------|
                            | * |	All-access |
                            | s3:* | Ability to access S3 if given permissions in the IAM Policy and API calls to the Chaos Index |
                            | s3:aws:* | Ability to access S3 if given permissions in the IAM Policy |
                            | s3:chaos:* | Ability to access the ChaosSearch Admin API |
                            | elastic:* | Ability to access the Elasticsearch API |
                            | elastic:opendistro:* | Ability to access the Elasticsearch API |
                            | chaos:* | Ability to access all replica, query, and theme settings |
                            | chaos:replica:* | Ability to access all replica information (i.e. compute allocation), initiate burst and see the compute status |
                            | chaos:replica:burst | Ability to click burst |
                            | chaos:replica:status | Ability to see how many compute resources are allocated |
                            | chaos:query:* | Full access to query permissions |
                            | chaos:query:status | Ability to access the Query progress bar |
                            | chaos:query:migrate |  |
                            | chaos:query:cancel | Ability to Cancel a query |
                            | chaos:query:pause |  |
                            | chaos:theme:user | Ability to change the color scheme of the ChaosSearch UI |
                            | kibana:* | Full access to Kibana permissions |
                            | kibana-settings:read | Ability to access Visualizations and Dashboards |
                            | kibana-settings:write | Ability to create Visualizations and Dashboards |
                            | kibana-opendistro:* | Ability to create Alerts |
                            | ui:* | Full access to the ChaosSearch UI |
                            | ui:storage | Ability to access the Storage |
                            | ui:refinery | Ability to access the Refinery |
                            | ui:analytics | Ability to access the Analytics |
                            | ui:dashboard | Ability to access the Dashboard |
                        Resources:
                          type: string
                          example: "crn:view:::foo-view"
                          description: |
                            The resource(s) to which this container applies
                      required:
                        - Effect
                        - Action
                        - Resources

      responses:
        '201':
          $ref: '#/components/responses/PermissionGroupObject'
        '400':
          description: The specified resource does not exist
        '500':
          $ref: '#/components/responses/InvalidInputError'

    put:
      summary: Update existing groups of this user context
      description: |
        Update existing groups of this user context. The caller must provide a JSON body with
        all required group information to update existing groups. The groups must already exist
        in the user context. This call is atomic, either all of the groups in the JSON document
        succeed in being updated, or none of them do.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: "7db91912-a3e9-4641-873c-3deccd07484c"
                  name:
                    type: string
                    example: "Foo"
                  permissions:
                    type: array
                    items:
                      type: object
                      properties:
                        Effect:
                          type: string
                          example: "Allow"
                          description: |
                            The type of effect for the permission of this container, Allow or Deny
                        Action:
                          type: string
                          example: "kibana:*"
                          description: |
                            The action(s) to which this container applies

                            | Action | Definition|
                            |--------|-----------|
                            | * |	All-access |
                            | s3:* | Ability to access S3 if given permissions in the IAM Policy and API calls to the Chaos Index |
                            | s3:aws:* | Ability to access S3 if given permissions in the IAM Policy |
                            | s3:chaos:* | Ability to access the ChaosSearch Admin API |
                            | elastic:* | Ability to access the Elasticsearch API |
                            | elastic:opendistro:* | Ability to access the Elasticsearch API |
                            | chaos:* | Ability to access all replica, query, and theme settings |
                            | chaos:replica:* | Ability to access all replica information (i.e. compute allocation), initiate burst and see the compute status |
                            | chaos:replica:burst | Ability to click burst |
                            | chaos:replica:status | Ability to see how many compute resources are allocated |
                            | chaos:query:* | Full access to query permissions |
                            | chaos:query:status | Ability to access the Query progress bar |
                            | chaos:query:migrate |  |
                            | chaos:query:cancel | Ability to Cancel a query |
                            | chaos:query:pause |  |
                            | chaos:theme:user | Ability to change the color scheme of the ChaosSearch UI |
                            | kibana:* | Full access to Kibana permissions |
                            | kibana-settings:read | Ability to access Visualizations and Dashboards |
                            | kibana-settings:write | Ability to create Visualizations and Dashboards |
                            | kibana-opendistro:* | Ability to create Alerts |
                            | ui:* | Full access to the ChaosSearch UI |
                            | ui:storage | Ability to access the Storage |
                            | ui:refinery | Ability to access the Refinery |
                            | ui:analytics | Ability to access the Analytics |
                            | ui:dashboard | Ability to access the Dashboard |
                        Resources:
                          type: string
                          example: "crn:view:::foo-view"
                          description: |
                            The resource(s) to which this container applies
                      required:
                        - Effect
                        - Action
                        - Resources

      responses:
        '201':
          $ref: '#/components/responses/PermissionGroupObject'
        '400':
          description: The specified resource does not exist
        '500':
          $ref: '#/components/responses/InvalidInputError'
    delete:
      summary: Delete groups of this user context
      description: |
        Deletes groups of this user context given an array of group IDs. The caller must
        provide a JSON body with all required group information to delete existing groups. The
        groups must already exist in the user context. This call is atomic, either all of the
        groups in the JSON document succeed in being deleted, or none of them do.

        Example (delete 1 existing group for this user context):

            [ "7db91912-a3e9-4641-873c-3deccd07484c" ]
      responses:
        '200':
          description: |
            An array of identifiers that were deleted
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: string
                    example: "7db91912-a3e9-4641-873c-3deccd07484c"
        '400':
          description: The specified resource does not exist
        '500':
          $ref: '#/components/responses/InvalidInputError'

  /user/group/{id}:
    description: |
      Fetch or delete a given group identified by its ID, there is no body sent to this
      endpoint, but JSON documents are returned by it. If you require bulk group operations see
      the groups endpoint
    parameters:
      - name: id
        description: |
          {id} is the ID of a Group
        example: "7db91912-a3e9-4641-873c-3deccd07484c"
        in: path
        schema:
          type: string
        required: true
    get:
      summary: Fetch the group data for the group ID
      description: |
        Returns a JSON document with the group data for the group ID
      responses:
        '200':
          $ref: '#/components/responses/PermissionGroupObject'
        '500':
          $ref: '#/components/responses/InvalidInputError'

    delete:
      summary: Delete the group data for the group ID
      description: |
        Delete the group data for the group ID
      responses:
        '200':
          description: successful delete
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "7db91912-a3e9-4641-873c-3deccd07484c"
        '400':
          description: The specified resource does not exist
        '500':
          $ref: '#/components/responses/InvalidInputError'

components:
  responses:
    DuplicateBucketError:
      description: The specified resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JsonResponse'
          example:
            code: BucketAlreadyExists
            message: Bucket Already Exists
    ModelSchemaFailure:
      description: The model schema supplied was not valid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JsonResponse'
          example:
            code: ModelSchemaFailure
            message: Model Schema Failed
    InvalidInputError:
      description: The input was invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TextResponse'
          example:
            "There was an internal server error."

    SuccessfulListing:
      description: |
        A successful list of resources that complies with the S3 XML spec

        Example:

            <ListAllMyBucketsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01">
              <Owner>
                <ID>Me</ID>
                <DisplayName>me</DisplayName>
              </Owner>
              <Buckets>
                <Bucket>
                  <Name>192.168.5.4</Name>
                  <CreationDate>2020-10-22T17:43:51.007Z</CreationDate>
                  <Tagging>
                    <TagSet>
                      <Tag><Key>cs3.region</Key><Value>us-east-1</Value></Tag>
                      <Tag><Key>cs3.compression</Key><Value>none</Value></Tag>
                      <Tag><Key>cs3.interval</Key><Value>true</Value></Tag>
                      <Tag><Key>cs3.index-retention</Key><Value>14</Value></Tag>
                      <Tag><Key>cs3.predicate</Key><Value>{&quot;AND&quot;:[{&quot;field&quot;:&quot;key&quot;,&quot;regex&quot;:&quot;.*&quot;}]}</Value></Tag>
                      <Tag><Key>cs3.bucket-type</Key><Value>object-group</Value></Tag>
                      <Tag><Key>cs3.visible</Key><Value>true</Value></Tag>
                      <Tag><Key>cs3.dataset-id</Key><Value>5dba873a-3b61-4eb1-bb78-07e237eda43c</Value></Tag>
                      <Tag><Key>cs3.target-active-index</Key><Value>-1</Value></Tag>
                      <Tag><Key>cs3.dataset-format</Key><Value>{&quot;stripPrefix&quot;:true,&quot;_type&quot;:&quot;JSON&quot;}</Value></Tag>
                      <Tag><Key>cs3.parent</Key><Value>bsd-glacier</Value></Tag>
                      <Tag><Key>cs3.events</Key><Value>[]</Value></Tag>
                    </TagSet>
                  </Tagging>
                </Bucket>
                ...
              </Buckets>
            </ListAllMyBucketsResult>

          Each Bucket has a tagset with attributes for that bucket. Most of the tags are attributes specified when the Bucket was created.

          *cs3.parent* the name of the parent of this Bucket, in the case of an Object Group it will be the physical (native S3 bucket) name

          *cs3.bucket-type* the type of bucket, it can have values -> physical (native S3 bucket), object-group, or view
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/XmlResponse'

    PermissionGroupObject:
      description: |
        Permission group contain policy used by RBAC
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                example: "7db91912-a3e9-4641-873c-3deccd07484c"
              name:
                type: string
                example: "Foo"
              permissions:
                type: array
                items:
                  type: object
                  properties:
                    Effect:
                      type: string
                      example: "Allow"
                      description: |
                        The type of effect for the permission of this container, Allow or Deny
                    Action:
                      type: string
                      example: "kibana:*"
                      description: |
                        The action(s) to which this container applies

                        | Action | Definition|
                        |--------|-----------|
                        | * |	All-access |
                        | s3:* | Ability to access S3 if given permissions in the IAM Policy and API calls to the Chaos Index |
                        | s3:aws:* | Ability to access S3 if given permissions in the IAM Policy |
                        | s3:chaos:* | Ability to access the ChaosSearch Admin API |
                        | elastic:* | Ability to access the Elasticsearch API |
                        | elastic:opendistro:* | Ability to access the Elasticsearch API |
                        | chaos:* | Ability to access all replica, query, and theme settings |
                        | chaos:replica:* | Ability to access all replica information (i.e. compute allocation), initiate burst and see the compute status |
                        | chaos:replica:burst | Ability to click burst |
                        | chaos:replica:status | Ability to see how many compute resources are allocated |
                        | chaos:query:* | Full access to query permissions |
                        | chaos:query:status | Ability to access the Query progress bar |
                        | chaos:query:migrate |  |
                        | chaos:query:cancel | Ability to Cancel a query |
                        | chaos:query:pause |  |
                        | chaos:theme:user | Ability to change the color scheme of the ChaosSearch UI |
                        | kibana:* | Full access to Kibana permissions |
                        | kibana-settings:read | Ability to access Visualizations and Dashboards |
                        | kibana-settings:write | Ability to create Visualizations and Dashboards |
                        | kibana-opendistro:* | Ability to create Alerts |
                        | ui:* | Full access to the ChaosSearch UI |
                        | ui:storage | Ability to access the Storage |
                        | ui:refinery | Ability to access the Refinery |
                        | ui:analytics | Ability to access the Analytics |
                        | ui:dashboard | Ability to access the Dashboard |
                    Resources:
                      type: string
                      example: "crn:view:::foo-view"
                      description: |
                        The resource(s) to which this container applies

  schemas:
    ObjectGroupFilter:
      properties:
        field:
          type: string
          enum:
            - key
          description: |
            Filter predicates to be applied to an Object key (requires either prefix or regex property)
        regex:
          type: string
          description: |
            A regular expression predicate to be applied to a key
        prefix:
          type: string
          description: |
            A regular expression predicate to be applied to the prefix of a key
      required:
        - field

    Format:
      type: object
      properties:
        _type:
          type: string
          enum:
            - CSV
            - JSON
            - LOG
          description: |
            The supported format types for parsing data to be indexed. The format will be used
            against all Objects in an Object Group. For any Objects that cannot be completely
            parsed.

            If data of the wrong type is ingested and attempted to be indexed, that data is
            dropped and an event is emmitted (displayed in the UI or available via API). If a
            field in the data is corrupt or missing it is not an error.

            JSON example
            
                "format":{"_type":"JSON","stripPrefix":true,"horizontal":true}

            CSV format
            
                "format":{"_type":"CSV","columnDelimiter":",","rowDelimiter":"\n","headerRow":true}

            LOG example
            
                "format":{"_type":"LOG","pattern":".*"}

      required:
        - _type
    OutputField:
      type: object
      properties:
        name:
          type: string
          description: A name for a given field
        type:
          type: string
          enum:
            - STRING
            - NUMBER
            - TIMEVAL
          description: A type for a given field
      required:
        - name
        - type
    Transform:
      properties:
        _type:
          type: string
          enum:
            - MaterializeRegexTransform
            - IPFieldTransform
            - GeoPointFieldTransform
            - UniqueIDTransform
            - VerticalArrayTransform
          description: |
            A field transformer type

            ## MaterializeRegexTransform
            "Transforms": [
                {
                  "_type":"MaterializeRegexTransform",
                  "pattern":".*(c).*(e)",
                  "inputField":"food",
                  "outputFields": [
                    {"name":"foo-number","type":"NUMBER"},{"name":"foo-time","type":"TIMEVAL"}
                  ]
                },
                {
                  "_type":"MaterializeRegexTransform",
                  "pattern":".*(c).*(e)",
                  "inputField":"first_name",
                  "outputFields":[
                    {"name":"foo-first","type":"STRING"},{"name":"foo-second","type":"STRING"}
                  ]
                }
              ]
            }

            The above transforms when given the following column values will produce new columns

              column value "regex-with-capture" -> virtual column "foo-number": "", virtual column "foo-time": ""
              column value "regex-with-capture" -> virtual column "foo-first": "c", virtual column "foo-second": "e"

              The first row produces empty column values because the type(s) do not parse
        pattern:
          type: string
          description: A regular expression with capture groups to extract values to apply transformation to
        inputField:
          type: string
          description: The column name from the source index
        outputFields:
          type: array
          items:
            $ref: '#/components/schemas/OutputField'
      required:
        - _type
        - pattern
        - inputField
        - outputFields

    TimeWindow:
      type: integer
      default: -1
      description: A time window (in terms of days) to determine whether a resource should be included (a value of -1 means no limit)

    ViewTimeWindow:
      allOf:
        - $ref: '#/components/schemas/TimeWindow'
        - description: |
            A View Window.

            Data outside of this window is not accessible.

            **NOTE:** The name "indexRetention" is used since a View is a
            Virtual Object Group. Data outside of this window is not
            actually deleted.

    JsonResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    XmlResponse:
      type: object
      properties:
        document:
          type: string
    TextResponse:
      type: string